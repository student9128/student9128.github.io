{"pages":[{"title":"关于","date":"2018-07-09T07:58:13.067Z","updated":"2018-07-09T07:58:13.067Z","comments":false,"path":"about/index.html","permalink":"https://student9128.github.io/about/index.html","excerpt":"","text":"个人&emsp;&emsp;2016年第一次搭建Hexo博客，当时为了学习而搭建，之后发现需要维护的时候，切换了不同设备就比较麻烦，所以没有进行下去。现在决定重新回来，欢迎关注指导。Hello,i am back!一个不断学习的Android开发者。 扫码支持 支付宝 微信 感谢您的支持，我会继续努力的! ^_^"},{"title":"友情链接","date":"2018-06-27T02:01:40.455Z","updated":"2018-06-26T09:10:21.665Z","comments":true,"path":"links/index.html","permalink":"https://student9128.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-06-27T03:10:52.000Z","updated":"2018-06-27T03:10:55.533Z","comments":false,"path":"tags/index.html","permalink":"https://student9128.github.io/tags/index.html","excerpt":"","text":"Android"}],"posts":[{"title":"JAVA标识符命名规则","slug":"JAVA标识符命名规则","date":"2018-07-09T08:07:48.000Z","updated":"2018-07-09T08:10:08.858Z","comments":true,"path":"2018/07/09/JAVA标识符命名规则/","link":"","permalink":"https://student9128.github.io/2018/07/09/JAVA标识符命名规则/","excerpt":"","text":"Java语言中，对各种变量、方法和类等要素命名时使用的字符序列称为标识符。 Java 标识符有如下命名规则： 由26个英文字母大小写，数字：0-9 符号：_ $ 组成 标识符应以字母、_ 、$开头。 标识符不能是关键字。 Java中严格区分大小写","categories":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/tags/Java/"}]},{"title":"FontAwesome 在Android中的使用","slug":"FontAwesome在Android中的使用","date":"2018-07-09T06:24:07.000Z","updated":"2018-07-09T07:11:21.885Z","comments":true,"path":"2018/07/09/FontAwesome在Android中的使用/","link":"","permalink":"https://student9128.github.io/2018/07/09/FontAwesome在Android中的使用/","excerpt":"","text":"本篇文章来记录下FontAweSome 在Android开发中的使用 效果 下载FontAweSome字体&emsp;&emsp;首先，要去下载fontAweSome字体。百度一下就可以找到，如果你找不到，请点击这里下 在工程中使用 将下载好的.ttf文件放入assets中 布局12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/ll_container&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_hello&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/fa_info&quot; android:textColor=&quot;#009688&quot; android:textSize=&quot;100sp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_poo&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/fa_chart&quot; android:textColor=&quot;#DAA520&quot; android:textSize=&quot;40sp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt;&lt;/LinearLayout&gt; &emsp;&emsp;可以看到布局文件中使用的TextView引用的外部string.可以是strings.xml文件也可以是你再values文件夹中新建的.xml文件。至于这个字符串怎么找的，可以去fontawesome的图标网上找到对应图标的字符串。12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;string name=&quot;fa_chart&quot;&gt;&amp;#xf201;&lt;/string&gt; &lt;string name=&quot;fa_info&quot;&gt;&amp;#xf2b9;&lt;/string&gt;&lt;/resources&gt; 代码中：12345Typeface font = Typeface.createFromAsset(getAssets(),&quot;fontawesome-webfont.ttf&quot;);TextView textView= (TextView) findViewById(R.id.tv_hello);textView.setTypeface(font);TextView tvPoo = findViewById(R.id.tv_poo);FontManager.fontIcon(tvPoo,this); 可以这样写。但是如果控件比较多的话，那么就稍微有些麻烦。这里通过FontManager类来统一设置12345678910111213141516171819202122232425/** * Created by Kevin on 2018/7/9. * &lt;p&gt; * Blog:http://student9128.top/ * CSDN:https://blog.csdn.net/student9128 * &lt;p/&gt; */public class FontManager &#123; public static void fontIcon(View v, Context context) &#123; Typeface typeface = Typeface.createFromAsset(context.getAssets(), &quot;fontawesome-webfont&quot; + &quot;.ttf&quot;); if (v instanceof ViewGroup) &#123; for (int i=0;i&lt;((ViewGroup) v).getChildCount();i++) &#123; View child = ((ViewGroup) v).getChildAt(i); fontIcon(child,context); &#125; &#125; else if (v instanceof TextView) &#123; ((TextView) v).setTypeface(typeface); &#125; else if (v instanceof Button) &#123; ((Button) v).setTypeface(typeface); &#125; else if (v instanceof EditText) &#123; ((EditText) v).setTypeface(typeface); &#125; &#125;&#125; 使用方法：12LinearLayout llContainer = findViewById(R.id.ll_container);FontManager.fontIcon(llContainer,this);","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"FontAweSome","slug":"FontAweSome","permalink":"https://student9128.github.io/tags/FontAweSome/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"Android Studio 3.1.2添加Module的问题","slug":"Android-Studio-3-1-2添加Module的问题","date":"2018-07-07T07:05:54.000Z","updated":"2018-07-07T07:27:03.680Z","comments":true,"path":"2018/07/07/Android-Studio-3-1-2添加Module的问题/","link":"","permalink":"https://student9128.github.io/2018/07/07/Android-Studio-3-1-2添加Module的问题/","excerpt":"","text":"&emsp;&emsp;Android 开发过程中，需要用到第三方，尽管添加依赖已经很普遍，但有的时候还是要添加module。&emsp;&emsp;AndroidStudio 3.1.2在import module的过程中发生了一个问题，就是finish后没有反应了。目录上也不显示moudle名称解决方案： 在setting.gradle中添加的include ‘:app’后面添加module的名称 1include &apos;:app&apos;,&apos;libraryname&apos;; 然后点击sync按钮进行重新编译一遍即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"},{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"写在前面的话","slug":"写在前面的话","date":"2018-06-26T07:50:57.000Z","updated":"2018-07-06T14:00:41.935Z","comments":true,"path":"2018/06/26/写在前面的话/","link":"","permalink":"https://student9128.github.io/2018/06/26/写在前面的话/","excerpt":"","text":"2016年第一次搭建Hexo博客，当时为了学习而搭建，之后发现需要维护的时候，切换了不同设备就比较麻烦，所以没有进行下去。现在决定重新回来，欢迎关注指导。Hello,i am back!","categories":[],"tags":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/tags/Test/"}]},{"title":"react-navigation的使用","slug":"react-navigation的使用","date":"2018-05-21T06:41:07.000Z","updated":"2018-07-09T08:02:48.839Z","comments":true,"path":"2018/05/21/react-navigation的使用/","link":"","permalink":"https://student9128.github.io/2018/05/21/react-navigation的使用/","excerpt":"","text":"react-navigation的是react native中的一个导航库，可以方便实现移动开发中的导航效果。网上很多关于react-navigation的使用文章。这里我只记录我自己使用过的。方便以后使用。因为这样的文章太多太多，各种讲解完全没必要，而且写文章的也不一定是自己就懂。 效果图 废话不多写，只贴代码。目的是，只要以后自己用的时候方便就可以。 导航栏 导入需要的控件12345import &#123; TabNavigator, StackNavigator, TabBarBottom,&#125; from &apos;react-navigation&apos;; 底部导航TabBar实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384const tabNavigator = TabNavigator(&#123; home: &#123; screen: MainScreen, navigationOptions:&#123; tabBarLabel:&apos;首页&apos;,//tabBar下面的文章 headerTitle:&apos;首页&apos;,//标题 tabBarIcon:(&#123;//tabBar的图标 tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-home&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, favorite: &#123; screen: FavoriteScreen, navigationOptions:&#123; headerTitle:&apos;收藏&apos;, tabBarLabel:&apos;收藏&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-heart&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, music:&#123; screen:MusicScreen, navigationOptions:&#123; headerTitle:&apos;音乐&apos;, tabBarLabel:&apos;音乐&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-musical-notes&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, settings:&#123; screen:SettingScreen, navigationOptions:&#123; headerTitle:&apos;设置&apos;, tabBarLabel:&apos;设置&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt;( &lt;Icon name=&apos;ios-settings&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; ) &#125; &#125;&#125;, &#123; initialRouteName: &apos;home&apos;,//默认tab tabBarPosition: &apos;bottom&apos;,//tabBar位置 backBehavior: &apos;none&apos;, swipeEnabled: false,//不可滑动 animationEnabled: false,//切换页面时候没有滑动效果 tabBarOptions: &#123; activeTintColor: ColorStyles.global, inactiveTintColor: &apos;#333333&apos;, showIcon: true, indicatorStyle: &#123; height: 0 &#125;, style: &#123; backgroundColor: &apos;#fff&apos;, // TabBar 背景色 paddingBottom: 0, // borderTopWidth: 0.5, // borderTopColor: &apos;#ccc&apos;, // margin:0 &#125;, labelStyle: &#123; fontSize: 12, marginTop: 0, paddingTop: 0, paddingBottom: 0, &#125;, tabStyle: &#123; height: 56 &#125; &#125;&#125;) 整体导航，将app中进行切换的界面都放在这里 1234567891011121314151617181920212223242526272829303132export default App = StackNavigator(&#123;//这里导出的需要注册的 home:&#123; screen:tabNavigator, &#125;, login:&#123; screen:LoginScreen, &#125;, detail:&#123; screen:DetailScreen &#125;&#125;,&#123; initialRouteName:&apos;login&apos;, navigationOptions:(&#123; headerStyle:&#123; backgroundColor:ColorStyles.global, &#125;, headerTitleStyle:&#123; color:&apos;white&apos;, fontSize:20, flex:1, textAlign:&apos;center&apos;, alignSelf:&apos;center&apos;, &#125;, headerTintColor:&apos;white&apos;, &#125;), mode:&apos;card&apos;, headerMode:&apos;screen&apos;,&#125;) 注册 1AppRegistry.registerComponent(&apos;ReactNavigationDemo&apos;, () =&gt; App); 上面这些代码可以实现导航栏的切换 界面之间的切换只需要一行代码 从下面代码里抽出来的：onPress = {()=&gt;nav.navigate(‘home’) 12345678910111213141516171819202122232425262728export default class LoginScreen extends Component &#123; static navigationOptions = &#123; header: null, &#125;; render() &#123; const nav = this.props.navigation return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;StatusBar backgroundColor=&quot;gray&quot; barStyle=&quot;light-content&quot; /&gt; &lt;View style=&#123;styles.loginItemContainer&#125;&gt; &lt;LoginItem icon_name=&apos;ios-contact&apos; placeholder=&apos;Please text in username&apos; icon_color=&#123;ColorStyles.global&#125;/&gt; &lt;LoginItem icon_name=&apos;ios-lock&apos; placeholder=&apos;Please text in password&apos; secureTextEntry=&#123;true&#125; icon_color=&#123;ColorStyles.global&#125;/&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress = &#123;()=&gt;nav.navigate(&apos;home&apos;)&#125;&gt;//这里进行界面切换 &lt;Text style=&#123;styles.btnLogin&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/View&gt; ) &#125;&#125;; 界面之间的传值 代码1234567891011121314//传值 &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress = &#123; ()=&gt;&#123; console.log(this.state.username); nav.navigate(&apos;home&apos;,&#123;username:this.state.username,password:this.state.password&#125;)&#125;&#125;&gt;//传值 &lt;Text style=&#123;styles.btnLogin&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt;//接收值 const &#123; navigation &#125; = this.props const username = navigation.getParam(&apos;username&apos;, &apos;&apos;); const password = navigation.getParam(&apos;password&apos;, &apos;&apos;); 源代码 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"react-native-vector-icons的使用","slug":"react-native-vector-icons的使用","date":"2018-05-21T06:07:51.000Z","updated":"2018-07-09T07:54:45.661Z","comments":true,"path":"2018/05/21/react-native-vector-icons的使用/","link":"","permalink":"https://student9128.github.io/2018/05/21/react-native-vector-icons的使用/","excerpt":"","text":"react-native-vector-icons是react native中一个第三方图标库。使用起来非常方便。这里只说Andronid。该库有添加字体的使用，这里只记录我自己用到的。方便以后使用。 通过如下命令行添加依赖库： 1npm install react-native-vector-icons --save Android使用要在project gradle中添加一行代码 使用起来就是下面这样 1234567891011import Icon from &apos;react-native-vector-icons/Ionicons&apos;;export default class SomeView extends Component&#123; render() &#123; return ( &lt;View&gt; &lt;Icon name=&apos;md-contact&apos; size=&#123;30&#125; color=&apos;black&apos;/&gt; &lt;/View&gt; ) &#125;;&#125; 效果图： 左侧是没在gradle添加代码的效果,右侧是添加后的效果 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative打包后运行闪退","slug":"ReactNative打包后运行闪退","date":"2018-05-19T06:10:06.000Z","updated":"2018-07-09T07:40:01.066Z","comments":true,"path":"2018/05/19/ReactNative打包后运行闪退/","link":"","permalink":"https://student9128.github.io/2018/05/19/ReactNative打包后运行闪退/","excerpt":"","text":"Android原生项目集成了React Native后，打包成release运行起来后会出现闪退情况。原因：没有将React Native文件打包进去。解决方案：需要添加bundle文件在Android工程里的assets文件夹下生成bundle文件：在工程目录下输入命令如下：1react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ 注意：看一下你的入口是index.android.js还是index.js，根据情况修改命令。","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Mac设置Office的语言问题","slug":"Mac设置Office的语言问题","date":"2018-04-21T01:59:45.000Z","updated":"2018-07-09T08:16:21.611Z","comments":true,"path":"2018/04/21/Mac设置Office的语言问题/","link":"","permalink":"https://student9128.github.io/2018/04/21/Mac设置Office的语言问题/","excerpt":"","text":"最近使用office时候发现了一个问题，由于电脑设置默认语言为英文。office也会自动切换为英文语言。想单独改office为中文版。找了一圈没找到方法，搜索了半天，发现很多人无法解决，要么就是修改电脑默认语言，还好最后在office官网找到了一个答案https://answers.microsoft.com/en-us/msoffice/forum/msoffice_other-mso_mac-mso_mac2016/how-to-manually-change-the-language-used-in-office/abe2a9c1-f550-45de-9d0e-58b99f206c41方法：打开终端（Terminal）：输入命令 123defaults write com.microsoft.Word AppleLanguages &apos;(&quot;zh-cn&quot;)&apos;defaults write com.microsoft.Excel AppleLanguages &apos;(&quot;zh-cn&quot;)&apos;defaults write com.microsoft.Powerpoint AppleLanguages &apos;(&quot;zh-cn&quot;)&apos; 不同的office软件可以设置不同的语言，如下图 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"VSCode常用插件","slug":"VSCode常用插件","date":"2018-04-15T14:30:23.000Z","updated":"2018-07-09T08:18:51.909Z","comments":true,"path":"2018/04/15/VSCode常用插件/","link":"","permalink":"https://student9128.github.io/2018/04/15/VSCode常用插件/","excerpt":"","text":"记录一些VSCode插件： 1.Auto Close Tag 2.Auto Rename Tag 3.Beautify4.Bracket Pair Colorizer 5.Code Spell Checker6.ESlint7.Filesize 显示文件的大小 8.HTML CSS Support9.HTML Snippets 代码快 10.HTMLHint11.Output Colorizer 12.React Native Snippet 13.React Native Tools 14.Setting Sync 同步设置的插件 主题的就算了，用来用去，还是感觉自带主题挺好的。 注：图片来源于Visual Studio Marketplace 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"VSCode","slug":"VSCode","permalink":"https://student9128.github.io/tags/VSCode/"}]},{"title":"React Native环境搭建","slug":"ReactNative环境搭建","date":"2018-04-15T14:05:39.000Z","updated":"2018-07-09T07:31:37.381Z","comments":true,"path":"2018/04/15/ReactNative环境搭建/","link":"","permalink":"https://student9128.github.io/2018/04/15/ReactNative环境搭建/","excerpt":"","text":"React Native环境搭建的文章网上一大堆，完全没有必要写这篇文章。这里只是简单记录下自己的可行性操作，方便自己查看，不用再去搜别人的了。 1.安装Node.js 我这里不按照网上或者React Native中文网写的用命令行安装Node.js，个人不习惯，直接去Node.js官网下载 2.安装镜像12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 很多地方都建议镜像，这里也安装镜像 3.安装yarn 根据自己需求，可安可不安，习惯用npm Yarn是Facebook提供的替代npm的工具。 12345npm install -g yarn react-native-cli设置镜像源：yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 4.创建React Native项目123react-native init HelloReactNativecd HelloReactNativereact-native run-android/run-ios 声明：文章是从CSDN迁过来的.","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问(四)","slug":"ReactNative遇到的问题(四)","date":"2018-03-31T15:09:11.000Z","updated":"2018-07-09T07:48:04.477Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(四)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(四)/","excerpt":"","text":"Hint: This error often happens when you’re running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run ‘npm start’).This error can also happen due to a require() error during initialization or failure to call AppRegistry.registerComponent. 解决方案：之前运行了一个项目，导致终端冲突，关闭所有终端，重启即可。 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问(三)","slug":"ReactNative遇到的问题(三)","date":"2018-03-31T15:07:07.000Z","updated":"2018-07-09T07:47:37.339Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(三)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(三)/","excerpt":"","text":"解决方案：修改gradle版本号 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问(二)","slug":"ReactNative遇到的问题(二)","date":"2018-03-31T14:52:13.000Z","updated":"2018-07-09T07:46:36.035Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(二)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(二)/","excerpt":"","text":"React Native安装失败的问题 Execution failed for task ‘:app:installDebug’. com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallException: INSTALL_FAILED_USER_RESTRICTED 这种问题有可能是不同的原因导致的：这里记录下：解决方案：1.检查下是否连接了模拟器或者手机(本人遇到的这个问题)2.看下是否是gradle的问题 stackoverflow问题解决方案：https://stackoverflow.com/questions/37500205/react-native-appinstalldebug-failed 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问题(一)","slug":"ReactNative遇到的问题(一)","date":"2018-03-31T07:25:27.000Z","updated":"2018-07-09T07:39:56.300Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(一)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(一)/","excerpt":"","text":"在我们创建React Native项目的时候发现gradle 版本相对比较低的，而且很多情况下直接编译会报错。而网上的很多解决方案就是gradle version改为1.2.3,于是，我有一个疑问，现在的gradle verion都已经3.0.1了，为什么还不升级呢？ 但是我发现我直接修改后，更是报各种错。首先看下图 这是我在网上搜到的一与我疑问类似的问题 我的解决方案：就是直接修改gradel版本为我想要的很明显，会出现一些错误 报错 解决方案：gradle中添加google(); 修改gradle-wrapper.properties文件中的distributionUrl=https\\://services.gradle.org/distributions/gradle-4.1-all.zip 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"VSCode通过git上传代码","slug":"VSCode通过git上传代码","date":"2018-02-14T08:49:22.000Z","updated":"2018-07-09T08:20:14.742Z","comments":true,"path":"2018/02/14/VSCode通过git上传代码/","link":"","permalink":"https://student9128.github.io/2018/02/14/VSCode通过git上传代码/","excerpt":"","text":"最近也是在不断学习中，接触VSCode时间不长，很多东西也是在学习，所以这里记录下VSCode通过git上传代码，以防之后忘记。 我用的的VSCode版本 起初建立仓库的时候通过命令：（这个是我网上搜的 ，应该通过图形化操作也是可用的，没有试）123456git inittouch README.mdgit add README.mdgit commit -m &quot;initial commit&quot;git remote add origin https://github.com/student9128/JSStudy.gitgit push -u origin master 相关操作如下图所示，注意路径的分隔符不要写错，我直接在电脑上复制的，可用从截图看出来斜杠方向不同，这里手动改下即可 上传完，随便在某个文件里修改下，会看到Changes里出现修改的文件 右上角的省略号可用找到相关操作命令，进行上传，注意上传的时候要写一些message,也就是描述内容，可根据提示进行操作。 我这里连接的github，由于我之前已经配置过了，没操作这步。关于git和github的连接，请参考Git连接github 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://student9128.github.io/tags/VSCode/"},{"name":"git","slug":"git","permalink":"https://student9128.github.io/tags/git/"}]},{"title":"关于document.getElementById返回null的解决方案","slug":"关于document-getElementById返回null的解决方案","date":"2018-02-12T01:02:26.000Z","updated":"2018-07-09T08:25:57.534Z","comments":true,"path":"2018/02/12/关于document-getElementById返回null的解决方案/","link":"","permalink":"https://student9128.github.io/2018/02/12/关于document-getElementById返回null的解决方案/","excerpt":"","text":"最近在学习javascrpit，在写的时候发现document.getElementById会返回null,当然将js写到html下面就不会出现这个问题，但是我引用外部js,将其写在了head标签里面，搜索了一下，发现可以这样解决。添加defer = &quot;true&quot;。这里记录下 1&lt;script src=&quot;../js/xx.js&quot; type=&quot;text/javascript&quot; defer=&quot;true&quot;&gt;&lt;/script&gt; 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"前端","slug":"前端","permalink":"https://student9128.github.io/categories/前端/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"},{"name":"javascript","slug":"javascript","permalink":"https://student9128.github.io/tags/javascript/"}]},{"title":"关于greenDao的配置","slug":"关于greenDao的配置","date":"2018-01-27T02:53:03.000Z","updated":"2018-07-10T03:11:51.533Z","comments":true,"path":"2018/01/27/关于greenDao的配置/","link":"","permalink":"https://student9128.github.io/2018/01/27/关于greenDao的配置/","excerpt":"","text":"greenDao是一个开源的数据库解决方案，至于其优势劣势不啰嗦，关键是能用，好用就行。这里简单记录下其配置方法greenDao的github地址https://github.com/greenrobot/greenDAO这里同样像其他文章写得那样贴图。贴图比较明了。 在Gradle里配置如下代码 12345678910111213141516171819// In your root build.gradle file:buildscript &#123; repositories &#123; jcenter() mavenCentral() // add repository &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:2.3.3&apos; classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.2&apos; // add plugin &#125;&#125; // In your app projects build.gradle file:apply plugin: &apos;com.android.application&apos;apply plugin: &apos;org.greenrobot.greendao&apos; // apply plugin dependencies &#123; compile &apos;org.greenrobot:greendao:3.2.2&apos; // add library&#125; 具体配置看贴图 Module GradleProject Gradle gradle里面配置完了以后，新建一个entity里（相当于bean）,设置表格中所需要的属性 例如： 1234567@Entitypublic class DataEntity &#123; @Id private Long id; private String name; private String age;&#125; id 就是数据库表格中的id,类型为Long这些写完就可以直接Make Project了 然后会自动生成三个类，刚才所写的类也会变化。如下：红框里的类是生成的，代码变化也如下：1234567891011121314151617181920212223242526272829303132333435@Entitypublic class DataEntity &#123; @Id private Long id; private String name; private String age; @Generated(hash = 1668938553) public DataEntity(Long id, String name, String age) &#123; this.id = id; this.name = name; this.age = age; &#125; @Generated(hash = 1892108943) public DataEntity() &#123; &#125; public Long getId() &#123; return this.id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getName() &#123; return this.name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return this.age; &#125; public void setAge(String age) &#123; this.age = age; &#125; &#125; 至此配置就全部完成了。具体使用请参考SQLitedatabase之GreenDao进行CRUD这里我只记录了一下简单的CRUD,具体怎么使用还要根据自己的情况。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"greenDao","slug":"greenDao","permalink":"https://student9128.github.io/tags/greenDao/"}]},{"title":"SQLitedatabase之GreenDao进行CRUD","slug":"SQLitedatabase之GreenDao进行CRUD","date":"2018-01-26T08:52:05.000Z","updated":"2018-07-10T03:15:47.792Z","comments":true,"path":"2018/01/26/SQLitedatabase之GreenDao进行CRUD/","link":"","permalink":"https://student9128.github.io/2018/01/26/SQLitedatabase之GreenDao进行CRUD/","excerpt":"","text":"Android开发中使用Sqlite进行数据库开发，但是发现通过自己写SQL语句进行CRUD操作的时候有时候会出各种bug,比如用like语句的时候，偶然发生差不出来的问题。现在数据库操作第三方也很多，这里记录写GreenDao吧. 这里只记录使用方法，怎么配置请参考 关于greenDao的配置 这里仍然只贴代码，少文字叙述。 Create123456private void createDb() &#123; mDevOpenHelper = new DaoMaster.DevOpenHelper(this, DB_NAME); mDaoMaster = new DaoMaster(mDevOpenHelper.getWritableDb()); mDaoSession = mDaoMaster.newSession(); mDataEntityDao = mDaoSession.getDataEntityDao(); &#125; Insert1234private void insertData(String name, String age) &#123; DataEntity dataEntity = new DataEntity(null, name, age); mDataEntityDao.insert(dataEntity); &#125; Update1234private void update(String name, String age) &#123; DataEntity dataEntity = new DataEntity(null, name, age); mDataEntityDao.update(dataEntity); &#125; Delete1234private void delete(String name, String age) &#123; DataEntity dataEntity = new DataEntity(null, name, age); mDataEntityDao.delete(dataEntity);&#125; 这里只记录使用方法，怎么配置请参考 关于greenDao的配置 源码下载：CSDNgihtub","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"greenDao","slug":"greenDao","permalink":"https://student9128.github.io/tags/greenDao/"}]},{"title":"SQLitedatabase之SQLiteOpenHelper进行CRUD","slug":"SQLitedatabase之SQLiteOpenHelper进行CRUD","date":"2018-01-26T08:42:00.000Z","updated":"2018-07-10T03:16:23.808Z","comments":true,"path":"2018/01/26/SQLitedatabase之SQLiteOpenHelper进行CRUD/","link":"","permalink":"https://student9128.github.io/2018/01/26/SQLitedatabase之SQLiteOpenHelper进行CRUD/","excerpt":"","text":"众所周知，Android开发中使用数据库Sqlite.这里简单记录一下SQLite的使用。 这里按CRUD顺序进行简单记录下： 直接贴操作代码，文字叙述没什么用！^_^ 首先是DatabaseHelper 123456789101112131415161718192021222324252627282930313233343536373839public class DatabaseHelper extends SQLiteOpenHelper &#123; private static final int DB_VERSION = 7;//数据库版本，进行手动更新 private static final String DB_NAME = &quot;SQLiteTest.db&quot;; private static final String TAG = &quot;DatabaseHelper.class&quot;; private static final String SQLITETABLE = &quot;sqliteTable&quot;; private static final String AGE = &quot;age&quot;; private static final String NAME = &quot;name&quot;; public DatabaseHelper(Context context) &#123; this(context, DB_NAME, DB_VERSION); &#125; public DatabaseHelper(Context context, int version) &#123; this(context, DB_NAME, version); &#125; public DatabaseHelper(Context context, String name, int version) &#123; this(context, name, null, version); &#125; public DatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123; super(context, name, factory, version); &#125; @Override public void onCreate(SQLiteDatabase db) &#123; String sql = &quot;create table if not exists &quot; + SQLITETABLE + &quot;(id INTEGER primary key autoincrement,&quot; + NAME + &quot; TEXT,&quot; + AGE + &quot; TEXT)&quot;; db.execSQL(sql); Log.d(TAG, &quot;onCreate: create database&quot;); &#125; @Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123; db.execSQL(&quot;drop table if exists sqliteTable&quot;); onCreate(db); Log.d(TAG, &quot;upgrade database&quot;); &#125;&#125; Create我这里将所有方法写到DatabaseDao类里面 123public DatabaseDao(Context context) &#123; databaseHelper = new DatabaseHelper(context); &#125; 在需要调用的类中直接new DatabaseDao(this)即可初始化创建数据库表 Insert123456 public void insert(String x, String age) &#123; String sql = &quot;insert into &quot; + SQLITETABLE + &quot;(name,age) values(?,?)&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase();// String x = &quot;x&quot;; sqLiteDatabase.execSQL(sql, new String[]&#123;x, age&#125;); &#125; 总结：insert into tableName(column1,column2...) values(?,?...) RetrieveList retrieveName(List dataBeans, String name) &#123;12345678910111213141516171819202122232425262728293031323334 dataBeans.clear(); String s = &quot;select * from &quot; + SQLITETABLE + &quot; where name =?&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); Cursor cursor = sqLiteDatabase.rawQuery(s, new String[]&#123;name&#125;); if (cursor.moveToFirst()) &#123; while (cursor.moveToNext()) &#123; String name1 = cursor.getString(cursor.getColumnIndex(&quot;name&quot;)); String age1 = cursor.getString(cursor.getColumnIndex(&quot;age&quot;)); Log.d(TAG, &quot;retrieveName: name=&quot; + name1 + &quot;,age=&quot; + age1); DataBean dataBean = new DataBean(); dataBean.setName(name1); dataBean.setAge(age1); dataBeans.add(dataBean); &#125; &#125; return dataBeans;&#125;public List&lt;DataBean&gt; retrieveAge(List&lt;DataBean&gt; dataBeans, String age) &#123; String sql = &quot;select * from &quot; + SQLITETABLE + &quot; where age=?&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); Cursor cursor = sqLiteDatabase.rawQuery(sql, new String[]&#123;age&#125;); if (cursor.moveToFirst()) &#123; while (cursor.moveToNext()) &#123; String name1 = cursor.getString(cursor.getColumnIndex(&quot;name&quot;)); String age1 = cursor.getString(cursor.getColumnIndex(&quot;age&quot;)); Log.d(TAG, &quot;retrieveAge: name=&quot; + name1 + &quot;,age=&quot; + age1); DataBean dataBean = new DataBean(); dataBean.setName(name1); dataBean.setAge(age1); dataBeans.add(dataBean); &#125; &#125; return dataBeans; 总结：select * from tableName where column=?通过SQL语句筛选，通过sqliteDatabase进行rawQuery进行相应查询sqLiteDatabase.rawQuery(sql, new String[]{age}); 12345public void updateName(String age, String newName) &#123; String sql = &quot;update sqliteTable set name=&apos;&quot; + newName + &quot;&apos; where age=&apos;&quot; + age + &quot;&apos;&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); sqLiteDatabase.execSQL(sql);&#125; 总结：update tableName set column = ‘x’ where column2=&#39;y&#39; 需要指出的是，我在使用这个语句的时候需要加‘’才成功，不然会报错。 Delete1234567891011public void deleteName(String name) &#123; String sql = &quot;delete from &quot; + SQLITETABLE + &quot; where name=&apos;&quot; + name + &quot;&apos;&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); sqLiteDatabase.execSQL(sql); &#125; public void deleteAge(String age) &#123; String sql = &quot;delete from &quot; + SQLITETABLE + &quot; where age=&quot; + age + &quot;&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); sqLiteDatabase.execSQL(sql); &#125; 总结：delete from tableName where column=&#39;x&#39;需要指出的是，我在使用这个语句的时候需要加‘’才成功，不然会报错。 结语，这篇文章没什么东西，都是通过简单的SQL语句实现，当然对于insert,update等也可以通过ContentValues来实现，我这里没那样写。关于greenDao的使用请参考 SQLitedatabase之GreenDao进行CRUD 源码下载：CSDNgihtub","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"sqlite","slug":"sqlite","permalink":"https://student9128.github.io/tags/sqlite/"}]},{"title":"Error:Execution failed for task ':app:packageDebug'解决方案","slug":"Error-Execution-failed-for-task-app-packageDebug-解决方案","date":"2017-12-20T02:22:13.000Z","updated":"2018-07-10T03:18:13.406Z","comments":true,"path":"2017/12/20/Error-Execution-failed-for-task-app-packageDebug-解决方案/","link":"","permalink":"https://student9128.github.io/2017/12/20/Error-Execution-failed-for-task-app-packageDebug-解决方案/","excerpt":"","text":"12Error:Execution failed for task &apos;:app:packageDebug&apos;.&gt; java.io.IOException: Could not delete path &apos;E:\\ADemo1\\ListViewTest\\app\\build\\intermediates\\incremental\\packageDebug\\file-input-save-data.txt&apos;. 最近发现build的时候工程里总是报这类错误，这里记录下，很明显的是由于txt文件无法删除，进入相应目录进行手动删除即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"高德地图（二）之显示定位，比例尺和添加Marker","slug":"高德地图（二）之显示定位，比例尺和添加Marker","date":"2017-12-09T05:22:46.000Z","updated":"2018-07-10T03:22:57.589Z","comments":true,"path":"2017/12/09/高德地图（二）之显示定位，比例尺和添加Marker/","link":"","permalink":"https://student9128.github.io/2017/12/09/高德地图（二）之显示定位，比例尺和添加Marker/","excerpt":"","text":"上一篇记录了高德地图的简单集成。只是初始化了地图，没有实现任何功能。这篇文章记录下定位功能和添加marker标记。 声明：本篇文章所以代码皆来自官方文档，我只是拼接了下。 效果图 效果图是这样的 定位下面直接记录定位实现过程 在onCreate里添加下面代码，这里需要实现一个接口。123456 //初始化地图控制器对象 AMap aMap = mMapView.getMap();// 设置定位监听 aMap.setLocationSource(this);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false aMap.setMyLocationEnabled(true); 实现的方法：12345678910111213141516171819202122232425262728293031323334353637383940414243 @Override public void activate(OnLocationChangedListener onLocationChangedListener) &#123; mListener = onLocationChangedListener; if (mlocationClient == null) &#123; //初始化定位 mlocationClient = new AMapLocationClient(this); //初始化定位参数 mLocationOption = new AMapLocationClientOption(); //设置定位回调监听 mlocationClient.setLocationListener(this); //设置为高精度定位模式 mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy); //设置定位参数 mlocationClient.setLocationOption(mLocationOption); // 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗， // 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用stopLocation()方法来取消定位请求 // 在定位结束后，在合适的生命周期调用onDestroy()方法 // 在单次定位情况下，定位无论成功与否，都无需调用stopLocation()方法移除请求，定位sdk内部会移除 mlocationClient.startLocation();//启动定位 &#125; &#125; @Override public void deactivate() &#123; mListener = null; if (mlocationClient != null) &#123; mlocationClient.stopLocation(); mlocationClient.onDestroy(); &#125; mlocationClient = null; &#125;@Override public void onLocationChanged(AMapLocation aMapLocation) &#123; if (mListener != null&amp;&amp;aMapLocation != null) &#123; if (aMapLocation != null &amp;&amp;aMapLocation.getErrorCode() == 0) &#123; mListener.onLocationChanged(aMapLocation);// 显示系统小蓝点 &#125; else &#123; String errText = &quot;定位失败,&quot; + aMapLocation.getErrorCode()+ &quot;: &quot; + aMapLocation.getErrorInfo(); Log.e(&quot;AmapErr&quot;,errText); &#125; &#125; &#125; 重写声明周期 123456789101112131415161718192021222324252627282930@Override protected void onDestroy() &#123; super.onDestroy(); //在activity执行onDestroy时执行mMapView.onDestroy()，销毁地图 mMapView.onDestroy(); if(null != mlocationClient)&#123; mlocationClient.onDestroy(); &#125; &#125; @Override protected void onResume() &#123; super.onResume(); //在activity执行onResume时执行mMapView.onResume ()，重新绘制加载地图 mMapView.onResume(); &#125; @Override protected void onPause() &#123; super.onPause(); //在activity执行onPause时执行mMapView.onPause ()，暂停地图的绘制 mMapView.onPause(); &#125; @Override protected void onSaveInstanceState(Bundle outState) &#123; super.onSaveInstanceState(outState); //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，保存地图当前的状态 mMapView.onSaveInstanceState(outState); &#125; 至此，定位功能已经实现。但是并没有显示定位蓝点，也就是我们常见的那个定位标记。 显示定位蓝点1aMap.setMyLocationEnabled(true);// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。 对定位蓝点进行自定义 你会发现效果图中的精度圈跟默认的不同，就是在这里自定义的。12345 MyLocationStyle myLocationStyle; myLocationStyle = new MyLocationStyle();//初始化定位蓝点样式类 // myLocationStyle.interval(2000); //设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。 //myLocationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(R.mipmap.ic_map_location));//定位自定义图标myLocationStyle.strokeColor(Color.CYAN); //精度圈自定义 myLocationStyle.radiusFillColor(Color.argb(50,38,165,153)) ;//精度圈自定义 myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATE);//只定位一次。aMap.setMyLocationStyle(myLocationStyle);//设置定位蓝点的Style 添加Marker地图上往往有一些标记成为marker.现在很多app地图里都有好多marker，最具代表性的就是共享单车app 示例代码如下：你可以根据自己的需求进行自行添加，拿到经纬度即可。 12aMap.addMarker(new MarkerOptions().position(new LatLng(31.238075,121.662691)).title(&quot;上海&quot;)); aMap.addMarker(new MarkerOptions().position(new LatLng(31.238403,121.661902)).title(&quot;上海&quot;)); 设置缩放级别1aMap.moveCamera(CameraUpdateFactory.zoomTo(15)); 设置比例尺和定位按钮123uiSettings = aMap.getUiSettings();uiSettings.setMyLocationButtonEnabled(true);//设置默认定位按钮是否显示，非必需设置。uiSettings.setScaleControlsEnabled(true);//控制比例尺控件是否显示 个人集成的时候和大家一样，也是一点点扒官网代码来的。这里把这些给贴出来。有需求的可以复制。 比较推荐通过官方文档进行学习，可能有些不清楚的地方需要网上搜索。毕竟有时候真的在官方文档找不到。 这里我偷懒了，都是粘贴一堆代码，还望见谅。重在实现功能吧。^_^ Demo下载 github暂时未传，回头完善了再传","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"高德地图","slug":"高德地图","permalink":"https://student9128.github.io/tags/高德地图/"}]},{"title":"高德地图（一）之简单集成","slug":"高德地图（一）之简单集成","date":"2017-12-09T04:41:39.000Z","updated":"2018-07-10T03:21:54.756Z","comments":true,"path":"2017/12/09/高德地图（一）之简单集成/","link":"","permalink":"https://student9128.github.io/2017/12/09/高德地图（一）之简单集成/","excerpt":"","text":"谈集成方案，无非就是按照官方文档搞一遍。这里不多赘述，和别的博客差不多，都是直接贴过程。我这里使用Android Studio，不再使用添加jar包，so文件的方案了。直接通过Gradle来集成。 一、申请Key声明：该部分截图来自官网注册完账号，进入后台，直接按照下图进行。 关于SHA1值获取，这里只说通过CMD来获取的方式：进入key文件所在路径，通过keytool -list -v -keystore key名字来获取如下图： 二、在Android Studio中集成这里仅通过gradle集成。个人感觉更快速方便。 app gradle文件 12345678//3D地图 compile &apos;com.amap.api:3dmap:latest.integration&apos; // 定位功能 compile &apos;com.amap.api:location:latest.integration&apos; // 搜索功能 compile &apos;com.amap.api:search:latest.integration&apos; //2D地图 compile &apos;com.amap.api:map2d:latest.integration&apos; 清单文件 123456789101112131415161718192021&lt;!--用于进行网络定位--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于访问GPS定位--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于获取运营商信息，用于支持提供运营商信息相关的接口--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于访问网络，网络定位需要上网--&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于读取手机当前的状态--&gt;&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于写入缓存数据到扩展存储卡--&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于申请调用A-GPS模块--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于申请获取蓝牙信息进行室内定位--&gt;&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;&gt;&lt;/uses-permission&gt;&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;&gt;&lt;/uses-permission&gt; application里面添加如下 123456789&lt;application ...&gt; &lt;!--高德地图集成--&gt; &lt;!--高德地图开始--&gt; &lt;meta-data android:name=&quot;com.amap.api.v2.apikey&quot; android:value=&quot;你申请的key&quot;/&gt; &lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt; &lt;!--高德地图结束--&gt; &lt;/application&gt; 代码混淆 123456789101112131415161718192021222324253D 地图 V5.0.0之前： -keep class com.amap.api.maps.**&#123;*;&#125; -keep class com.autonavi.amap.mapcore.*&#123;*;&#125; -keep class com.amap.api.trace.**&#123;*;&#125; 3D 地图 V5.0.0之后： -keep class com.amap.api.maps.**&#123;*;&#125; -keep class com.autonavi.**&#123;*;&#125; -keep class com.amap.api.trace.**&#123;*;&#125; 定位 -keep class com.amap.api.location.**&#123;*;&#125; -keep class com.amap.api.fence.**&#123;*;&#125; -keep class com.autonavi.aps.amapapi.model.**&#123;*;&#125; 搜索 -keep class com.amap.api.services.**&#123;*;&#125; 2D地图 -keep class com.amap.api.maps2d.**&#123;*;&#125; -keep class com.amap.api.mapcore2d.**&#123;*;&#125; 导航 -keep class com.amap.api.navi.**&#123;*;&#125; -keep class com.autonavi.**&#123;*;&#125; 注意：这里要提醒一点是，申请key的时候如果只填写了发布版是SHA1值，个人建议在Gradle中添加下面的代码，可以在debug中正常使用key 12345678910buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; signingConfig signingConfigs.release &#125; debug &#123; signingConfig signingConfigs.release//使用签名文件 &#125; &#125; 三、实现效果基本配置完成了，剩下的就是在app里展示地图效果了 布局 12345&lt;com.amap.api.maps.MapView android:id=&quot;@+id/map_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;/com.amap.api.maps.MapView&gt; 1&gt;代码 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); mapView.onCreate(savedInstanceState); aMap = mapView.getMap(); }` 效果只进行了初始化，并不能定位到你所在位置。 更多请查看第二篇高德地图（二）之显示定位，比例尺和添加Marker","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"高德地图","slug":"高德地图","permalink":"https://student9128.github.io/tags/高德地图/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-12-18T16:00:00.000Z","updated":"2018-07-06T15:58:14.307Z","comments":true,"path":"2016/12/19/hello-world/","link":"","permalink":"https://student9128.github.io/2016/12/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/categories/Test/"}],"tags":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/tags/Test/"}]},{"title":"AndroidStudio导入第三方库","slug":"AndroidStudio导入第三方库","date":"2016-07-14T09:38:18.000Z","updated":"2018-07-07T07:03:29.435Z","comments":true,"path":"2016/07/14/AndroidStudio导入第三方库/","link":"","permalink":"https://student9128.github.io/2016/07/14/AndroidStudio导入第三方库/","excerpt":"","text":"大家都知道，现在很多公司都在用Google推崇的Android Studio，不过使用的时候总会有这样那样的疑问，比如说如何导入第三方库呢，以前的Eclipse都是之间复制粘贴到libs下的。Android Studio就不能这样了。我说两种自己常用的方法，还望大家多多指点！:) 第一种：通过导入Module1&gt;打开File——&gt;New——&gt;Import Module路径，点击Import Module; 2&gt;点击“…”找到大三方库所在路径 我这里使用的slidingMenu库演示，值得注意的是要将第三方库放到工程（project）所在目录，我这个是解压后正好有两个文件夹，如果你的不是那就在工程（project）所在目录新建一个文件夹，名字随意起方便你自己记就行了。然后（如下图）选择要导入的类库（看图片，要选择src所在目录的外面的一层，不然无法导入的，注意gradle文件，下面会出问题）。 3&gt;点击OK,出现下面图，说明选择正确，可以Finish进行导入了（library是导入的类库名称） 4&gt;好了，让Android Studio自己进行build吧，完成后如下图，会出现library文件夹，说明你导入成功了。 （值得注意的是，在build的时候会出现你的android studio缺少某些sdk,如19.1.0，直接按照提示进行安装即可。相信大家都会) 第二种：添加依赖 添加依赖更加简便 1&gt;打开File——&gt;Project Structure路径：2&gt;按照如上图路径：添加Library dependency 3&gt;直接在搜索框中搜索所要添加的库名即可，选中所要添加的类库，点击OK，等待Android Studio进行build完成即添加成功（可以在gradle文件中确定一下是否存在你刚刚添加的依赖，如果存在就说明添加成功） 声明：文章是从CSDN迁过来的，这里的图片是重新做的，所以AndroidStudio是新版本的","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"}]}]}
{"pages":[{"title":"关于","date":"2018-07-09T07:58:13.067Z","updated":"2018-07-09T07:58:13.067Z","comments":false,"path":"about/index.html","permalink":"https://student9128.github.io/about/index.html","excerpt":"","text":"个人&emsp;&emsp;2016年第一次搭建Hexo博客，当时为了学习而搭建，之后发现需要维护的时候，切换了不同设备就比较麻烦，所以没有进行下去。现在决定重新回来，欢迎关注指导。Hello,i am back!一个不断学习的Android开发者。 扫码支持 支付宝 微信 感谢您的支持，我会继续努力的! ^_^"},{"title":"标签","date":"2018-06-27T03:10:52.000Z","updated":"2018-06-27T03:10:55.533Z","comments":false,"path":"tags/index.html","permalink":"https://student9128.github.io/tags/index.html","excerpt":"","text":"Android"},{"title":"友情链接","date":"2018-06-27T02:01:40.455Z","updated":"2018-06-26T09:10:21.665Z","comments":true,"path":"links/index.html","permalink":"https://student9128.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA标识符命名规则","slug":"JAVA标识符命名规则","date":"2018-07-09T08:07:48.000Z","updated":"2018-07-09T08:10:08.858Z","comments":true,"path":"2018/07/09/JAVA标识符命名规则/","link":"","permalink":"https://student9128.github.io/2018/07/09/JAVA标识符命名规则/","excerpt":"","text":"Java语言中，对各种变量、方法和类等要素命名时使用的字符序列称为标识符。 Java 标识符有如下命名规则： 由26个英文字母大小写，数字：0-9 符号：_ $ 组成 标识符应以字母、_ 、$开头。 标识符不能是关键字。 Java中严格区分大小写","categories":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/tags/Java/"}]},{"title":"FontAwesome 在Android中的使用","slug":"FontAwesome在Android中的使用","date":"2018-07-09T06:24:07.000Z","updated":"2018-07-09T07:11:21.885Z","comments":true,"path":"2018/07/09/FontAwesome在Android中的使用/","link":"","permalink":"https://student9128.github.io/2018/07/09/FontAwesome在Android中的使用/","excerpt":"","text":"本篇文章来记录下FontAweSome 在Android开发中的使用 效果 下载FontAweSome字体&emsp;&emsp;首先，要去下载fontAweSome字体。百度一下就可以找到，如果你找不到，请点击这里下 在工程中使用 将下载好的.ttf文件放入assets中 布局12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/ll_container&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_hello&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/fa_info&quot; android:textColor=&quot;#009688&quot; android:textSize=&quot;100sp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_poo&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/fa_chart&quot; android:textColor=&quot;#DAA520&quot; android:textSize=&quot;40sp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt;&lt;/LinearLayout&gt; &emsp;&emsp;可以看到布局文件中使用的TextView引用的外部string.可以是strings.xml文件也可以是你再values文件夹中新建的.xml文件。至于这个字符串怎么找的，可以去fontawesome的图标网上找到对应图标的字符串。12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;string name=&quot;fa_chart&quot;&gt;&amp;#xf201;&lt;/string&gt; &lt;string name=&quot;fa_info&quot;&gt;&amp;#xf2b9;&lt;/string&gt;&lt;/resources&gt; 代码中：12345Typeface font = Typeface.createFromAsset(getAssets(),&quot;fontawesome-webfont.ttf&quot;);TextView textView= (TextView) findViewById(R.id.tv_hello);textView.setTypeface(font);TextView tvPoo = findViewById(R.id.tv_poo);FontManager.fontIcon(tvPoo,this); 可以这样写。但是如果控件比较多的话，那么就稍微有些麻烦。这里通过FontManager类来统一设置12345678910111213141516171819202122232425/** * Created by Kevin on 2018/7/9. * &lt;p&gt; * Blog:http://student9128.top/ * CSDN:https://blog.csdn.net/student9128 * &lt;p/&gt; */public class FontManager &#123; public static void fontIcon(View v, Context context) &#123; Typeface typeface = Typeface.createFromAsset(context.getAssets(), &quot;fontawesome-webfont&quot; + &quot;.ttf&quot;); if (v instanceof ViewGroup) &#123; for (int i=0;i&lt;((ViewGroup) v).getChildCount();i++) &#123; View child = ((ViewGroup) v).getChildAt(i); fontIcon(child,context); &#125; &#125; else if (v instanceof TextView) &#123; ((TextView) v).setTypeface(typeface); &#125; else if (v instanceof Button) &#123; ((Button) v).setTypeface(typeface); &#125; else if (v instanceof EditText) &#123; ((EditText) v).setTypeface(typeface); &#125; &#125;&#125; 使用方法：12LinearLayout llContainer = findViewById(R.id.ll_container);FontManager.fontIcon(llContainer,this);","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"FontAweSome","slug":"FontAweSome","permalink":"https://student9128.github.io/tags/FontAweSome/"}]},{"title":"Android Studio 3.1.2添加Module的问题","slug":"Android-Studio-3-1-2添加Module的问题","date":"2018-07-07T07:05:54.000Z","updated":"2018-07-07T07:27:03.680Z","comments":true,"path":"2018/07/07/Android-Studio-3-1-2添加Module的问题/","link":"","permalink":"https://student9128.github.io/2018/07/07/Android-Studio-3-1-2添加Module的问题/","excerpt":"","text":"&emsp;&emsp;Android 开发过程中，需要用到第三方，尽管添加依赖已经很普遍，但有的时候还是要添加module。&emsp;&emsp;AndroidStudio 3.1.2在import module的过程中发生了一个问题，就是finish后没有反应了。目录上也不显示moudle名称解决方案： 在setting.gradle中添加的include ‘:app’后面添加module的名称 1include &apos;:app&apos;,&apos;libraryname&apos;; 然后点击sync按钮进行重新编译一遍即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"},{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"写在前面的话","slug":"写在前面的话","date":"2018-06-26T07:50:57.000Z","updated":"2018-07-06T14:00:41.935Z","comments":true,"path":"2018/06/26/写在前面的话/","link":"","permalink":"https://student9128.github.io/2018/06/26/写在前面的话/","excerpt":"","text":"2016年第一次搭建Hexo博客，当时为了学习而搭建，之后发现需要维护的时候，切换了不同设备就比较麻烦，所以没有进行下去。现在决定重新回来，欢迎关注指导。Hello,i am back!","categories":[],"tags":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/tags/Test/"}]},{"title":"react-navigation的使用","slug":"react-navigation的使用","date":"2018-05-21T06:41:07.000Z","updated":"2018-07-10T05:27:44.028Z","comments":true,"path":"2018/05/21/react-navigation的使用/","link":"","permalink":"https://student9128.github.io/2018/05/21/react-navigation的使用/","excerpt":"","text":"react-navigation的是react native中的一个导航库，可以方便实现移动开发中的导航效果。网上很多关于react-navigation的使用文章。这里我只记录我自己使用过的。方便以后使用。因为这样的文章太多太多，各种讲解完全没必要，而且写文章的也不一定是自己就懂。 效果图 废话不多写，只贴代码。目的是，只要以后自己用的时候方便就可以。 导航栏 导入需要的控件12345import &#123; TabNavigator, StackNavigator, TabBarBottom,&#125; from &apos;react-navigation&apos;; 底部导航TabBar实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384const tabNavigator = TabNavigator(&#123; home: &#123; screen: MainScreen, navigationOptions:&#123; tabBarLabel:&apos;首页&apos;,//tabBar下面的文章 headerTitle:&apos;首页&apos;,//标题 tabBarIcon:(&#123;//tabBar的图标 tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-home&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, favorite: &#123; screen: FavoriteScreen, navigationOptions:&#123; headerTitle:&apos;收藏&apos;, tabBarLabel:&apos;收藏&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-heart&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, music:&#123; screen:MusicScreen, navigationOptions:&#123; headerTitle:&apos;音乐&apos;, tabBarLabel:&apos;音乐&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-musical-notes&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, settings:&#123; screen:SettingScreen, navigationOptions:&#123; headerTitle:&apos;设置&apos;, tabBarLabel:&apos;设置&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt;( &lt;Icon name=&apos;ios-settings&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; ) &#125; &#125;&#125;, &#123; initialRouteName: &apos;home&apos;,//默认tab tabBarPosition: &apos;bottom&apos;,//tabBar位置 backBehavior: &apos;none&apos;, swipeEnabled: false,//不可滑动 animationEnabled: false,//切换页面时候没有滑动效果 tabBarOptions: &#123; activeTintColor: ColorStyles.global, inactiveTintColor: &apos;#333333&apos;, showIcon: true, indicatorStyle: &#123; height: 0 &#125;, style: &#123; backgroundColor: &apos;#fff&apos;, // TabBar 背景色 paddingBottom: 0, // borderTopWidth: 0.5, // borderTopColor: &apos;#ccc&apos;, // margin:0 &#125;, labelStyle: &#123; fontSize: 12, marginTop: 0, paddingTop: 0, paddingBottom: 0, &#125;, tabStyle: &#123; height: 56 &#125; &#125;&#125;) 整体导航，将app中进行切换的界面都放在这里 1234567891011121314151617181920212223242526272829303132export default App = StackNavigator(&#123;//这里导出的需要注册的 home:&#123; screen:tabNavigator, &#125;, login:&#123; screen:LoginScreen, &#125;, detail:&#123; screen:DetailScreen &#125;&#125;,&#123; initialRouteName:&apos;login&apos;, navigationOptions:(&#123; headerStyle:&#123; backgroundColor:ColorStyles.global, &#125;, headerTitleStyle:&#123; color:&apos;white&apos;, fontSize:20, flex:1, textAlign:&apos;center&apos;, alignSelf:&apos;center&apos;, &#125;, headerTintColor:&apos;white&apos;, &#125;), mode:&apos;card&apos;, headerMode:&apos;screen&apos;,&#125;) 注册 1AppRegistry.registerComponent(&apos;ReactNavigationDemo&apos;, () =&gt; App); 上面这些代码可以实现导航栏的切换 界面之间的切换只需要一行代码 从下面代码里抽出来的：onPress = {()=&gt;nav.navigate(‘home’) 12345678910111213141516171819202122232425262728export default class LoginScreen extends Component &#123; static navigationOptions = &#123; header: null, &#125;; render() &#123; const nav = this.props.navigation return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;StatusBar backgroundColor=&quot;gray&quot; barStyle=&quot;light-content&quot; /&gt; &lt;View style=&#123;styles.loginItemContainer&#125;&gt; &lt;LoginItem icon_name=&apos;ios-contact&apos; placeholder=&apos;Please text in username&apos; icon_color=&#123;ColorStyles.global&#125;/&gt; &lt;LoginItem icon_name=&apos;ios-lock&apos; placeholder=&apos;Please text in password&apos; secureTextEntry=&#123;true&#125; icon_color=&#123;ColorStyles.global&#125;/&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress = &#123;()=&gt;nav.navigate(&apos;home&apos;)&#125;&gt;//这里进行界面切换 &lt;Text style=&#123;styles.btnLogin&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/View&gt; ) &#125;&#125;; 界面之间的传值 代码1234567891011121314//传值 &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress = &#123; ()=&gt;&#123; console.log(this.state.username); nav.navigate(&apos;home&apos;,&#123;username:this.state.username,password:this.state.password&#125;)&#125;&#125;&gt;//传值 &lt;Text style=&#123;styles.btnLogin&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt;//接收值 const &#123; navigation &#125; = this.props const username = navigation.getParam(&apos;username&apos;, &apos;&apos;); const password = navigation.getParam(&apos;password&apos;, &apos;&apos;); 源代码 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"react-native-vector-icons的使用","slug":"react-native-vector-icons的使用","date":"2018-05-21T06:07:51.000Z","updated":"2018-07-10T05:28:28.014Z","comments":true,"path":"2018/05/21/react-native-vector-icons的使用/","link":"","permalink":"https://student9128.github.io/2018/05/21/react-native-vector-icons的使用/","excerpt":"","text":"react-native-vector-icons是react native中一个第三方图标库。使用起来非常方便。这里只说Andronid。该库有添加字体的使用，这里只记录我自己用到的。方便以后使用。 通过如下命令行添加依赖库： 1npm install react-native-vector-icons --save Android使用要在project gradle中添加一行代码 使用起来就是下面这样 1234567891011import Icon from &apos;react-native-vector-icons/Ionicons&apos;;export default class SomeView extends Component&#123; render() &#123; return ( &lt;View&gt; &lt;Icon name=&apos;md-contact&apos; size=&#123;30&#125; color=&apos;black&apos;/&gt; &lt;/View&gt; ) &#125;;&#125; 效果图： 左侧是没在gradle添加代码的效果,右侧是添加后的效果 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"ReactNative打包后运行闪退","slug":"ReactNative打包后运行闪退","date":"2018-05-19T06:10:06.000Z","updated":"2018-07-09T07:40:01.066Z","comments":true,"path":"2018/05/19/ReactNative打包后运行闪退/","link":"","permalink":"https://student9128.github.io/2018/05/19/ReactNative打包后运行闪退/","excerpt":"","text":"Android原生项目集成了React Native后，打包成release运行起来后会出现闪退情况。原因：没有将React Native文件打包进去。解决方案：需要添加bundle文件在Android工程里的assets文件夹下生成bundle文件：在工程目录下输入命令如下：1react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ 注意：看一下你的入口是index.android.js还是index.js，根据情况修改命令。","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"Mac设置Office的语言问题","slug":"Mac设置Office的语言问题","date":"2018-04-21T01:59:45.000Z","updated":"2018-07-10T05:28:28.028Z","comments":true,"path":"2018/04/21/Mac设置Office的语言问题/","link":"","permalink":"https://student9128.github.io/2018/04/21/Mac设置Office的语言问题/","excerpt":"","text":"最近使用office时候发现了一个问题，由于电脑设置默认语言为英文。office也会自动切换为英文语言。想单独改office为中文版。找了一圈没找到方法，搜索了半天，发现很多人无法解决，要么就是修改电脑默认语言，还好最后在office官网找到了一个答案https://answers.microsoft.com/en-us/msoffice/forum/msoffice_other-mso_mac-mso_mac2016/how-to-manually-change-the-language-used-in-office/abe2a9c1-f550-45de-9d0e-58b99f206c41方法：打开终端（Terminal）：输入命令 123defaults write com.microsoft.Word AppleLanguages &apos;(&quot;zh-cn&quot;)&apos;defaults write com.microsoft.Excel AppleLanguages &apos;(&quot;zh-cn&quot;)&apos;defaults write com.microsoft.Powerpoint AppleLanguages &apos;(&quot;zh-cn&quot;)&apos; 不同的office软件可以设置不同的语言，如下图 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"VSCode常用插件","slug":"VSCode常用插件","date":"2018-04-15T14:30:23.000Z","updated":"2018-07-10T05:28:28.013Z","comments":true,"path":"2018/04/15/VSCode常用插件/","link":"","permalink":"https://student9128.github.io/2018/04/15/VSCode常用插件/","excerpt":"","text":"记录一些VSCode插件： 1.Auto Close Tag 2.Auto Rename Tag 3.Beautify4.Bracket Pair Colorizer 5.Code Spell Checker6.ESlint7.Filesize 显示文件的大小 8.HTML CSS Support9.HTML Snippets 代码快 10.HTMLHint11.Output Colorizer 12.React Native Snippet 13.React Native Tools 14.Setting Sync 同步设置的插件 主题的就算了，用来用去，还是感觉自带主题挺好的。 注：图片来源于Visual Studio Marketplace 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"VSCode","slug":"VSCode","permalink":"https://student9128.github.io/tags/VSCode/"}]},{"title":"React Native环境搭建","slug":"ReactNative环境搭建","date":"2018-04-15T14:05:39.000Z","updated":"2018-07-09T07:31:37.381Z","comments":true,"path":"2018/04/15/ReactNative环境搭建/","link":"","permalink":"https://student9128.github.io/2018/04/15/ReactNative环境搭建/","excerpt":"","text":"React Native环境搭建的文章网上一大堆，完全没有必要写这篇文章。这里只是简单记录下自己的可行性操作，方便自己查看，不用再去搜别人的了。 1.安装Node.js 我这里不按照网上或者React Native中文网写的用命令行安装Node.js，个人不习惯，直接去Node.js官网下载 2.安装镜像12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 很多地方都建议镜像，这里也安装镜像 3.安装yarn 根据自己需求，可安可不安，习惯用npm Yarn是Facebook提供的替代npm的工具。 12345npm install -g yarn react-native-cli设置镜像源：yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 4.创建React Native项目123react-native init HelloReactNativecd HelloReactNativereact-native run-android/run-ios 声明：文章是从CSDN迁过来的.","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"ReactNative遇到的问(四)","slug":"ReactNative遇到的问题(四)","date":"2018-03-31T15:09:11.000Z","updated":"2018-07-10T05:28:28.013Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(四)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(四)/","excerpt":"","text":"Hint: This error often happens when you’re running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run ‘npm start’).This error can also happen due to a require() error during initialization or failure to call AppRegistry.registerComponent. 解决方案：之前运行了一个项目，导致终端冲突，关闭所有终端，重启即可。 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"ReactNative遇到的问(三)","slug":"ReactNative遇到的问题(三)","date":"2018-03-31T15:07:07.000Z","updated":"2018-07-10T05:28:28.013Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(三)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(三)/","excerpt":"","text":"解决方案：修改gradle版本号 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"ReactNative遇到的问(二)","slug":"ReactNative遇到的问题(二)","date":"2018-03-31T14:52:13.000Z","updated":"2018-07-10T05:28:28.013Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(二)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(二)/","excerpt":"","text":"React Native安装失败的问题 Execution failed for task ‘:app:installDebug’. com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallException: INSTALL_FAILED_USER_RESTRICTED 这种问题有可能是不同的原因导致的：这里记录下：解决方案：1.检查下是否连接了模拟器或者手机(本人遇到的这个问题)2.看下是否是gradle的问题 stackoverflow问题解决方案：https://stackoverflow.com/questions/37500205/react-native-appinstalldebug-failed 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"ReactNative遇到的问题(一)","slug":"ReactNative遇到的问题(一)","date":"2018-03-31T07:25:27.000Z","updated":"2018-07-10T05:28:02.613Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(一)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(一)/","excerpt":"","text":"在我们创建React Native项目的时候发现gradle 版本相对比较低的，而且很多情况下直接编译会报错。而网上的很多解决方案就是gradle version改为1.2.3,于是，我有一个疑问，现在的gradle verion都已经3.0.1了，为什么还不升级呢？ 但是我发现我直接修改后，更是报各种错。首先看下图 这是我在网上搜到的一与我疑问类似的问题 我的解决方案：就是直接修改gradel版本为我想要的很明显，会出现一些错误 报错 解决方案：gradle中添加google(); 修改gradle-wrapper.properties文件中的distributionUrl=https\\://services.gradle.org/distributions/gradle-4.1-all.zip 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"}]},{"title":"VSCode通过git上传代码","slug":"VSCode通过git上传代码","date":"2018-02-14T08:49:22.000Z","updated":"2018-07-10T05:28:28.014Z","comments":true,"path":"2018/02/14/VSCode通过git上传代码/","link":"","permalink":"https://student9128.github.io/2018/02/14/VSCode通过git上传代码/","excerpt":"","text":"最近也是在不断学习中，接触VSCode时间不长，很多东西也是在学习，所以这里记录下VSCode通过git上传代码，以防之后忘记。 我用的的VSCode版本 起初建立仓库的时候通过命令：（这个是我网上搜的 ，应该通过图形化操作也是可用的，没有试）123456git inittouch README.mdgit add README.mdgit commit -m &quot;initial commit&quot;git remote add origin https://github.com/student9128/JSStudy.gitgit push -u origin master 相关操作如下图所示，注意路径的分隔符不要写错，我直接在电脑上复制的，可用从截图看出来斜杠方向不同，这里手动改下即可 上传完，随便在某个文件里修改下，会看到Changes里出现修改的文件 右上角的省略号可用找到相关操作命令，进行上传，注意上传的时候要写一些message,也就是描述内容，可根据提示进行操作。 我这里连接的github，由于我之前已经配置过了，没操作这步。关于git和github的连接，请参考Git连接github 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://student9128.github.io/tags/VSCode/"},{"name":"git","slug":"git","permalink":"https://student9128.github.io/tags/git/"}]},{"title":"关于document.getElementById返回null的解决方案","slug":"关于document-getElementById返回null的解决方案","date":"2018-02-12T01:02:26.000Z","updated":"2018-07-10T05:28:28.014Z","comments":true,"path":"2018/02/12/关于document-getElementById返回null的解决方案/","link":"","permalink":"https://student9128.github.io/2018/02/12/关于document-getElementById返回null的解决方案/","excerpt":"","text":"最近在学习javascrpit，在写的时候发现document.getElementById会返回null,当然将js写到html下面就不会出现这个问题，但是我引用外部js,将其写在了head标签里面，搜索了一下，发现可以这样解决。添加defer = &quot;true&quot;。这里记录下 1&lt;script src=&quot;../js/xx.js&quot; type=&quot;text/javascript&quot; defer=&quot;true&quot;&gt;&lt;/script&gt; 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"前端","slug":"前端","permalink":"https://student9128.github.io/categories/前端/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"},{"name":"javascript","slug":"javascript","permalink":"https://student9128.github.io/tags/javascript/"}]},{"title":"关于greenDao的配置","slug":"关于greenDao的配置","date":"2018-01-27T02:53:03.000Z","updated":"2018-07-10T03:11:51.533Z","comments":true,"path":"2018/01/27/关于greenDao的配置/","link":"","permalink":"https://student9128.github.io/2018/01/27/关于greenDao的配置/","excerpt":"","text":"greenDao是一个开源的数据库解决方案，至于其优势劣势不啰嗦，关键是能用，好用就行。这里简单记录下其配置方法greenDao的github地址https://github.com/greenrobot/greenDAO这里同样像其他文章写得那样贴图。贴图比较明了。 在Gradle里配置如下代码 12345678910111213141516171819// In your root build.gradle file:buildscript &#123; repositories &#123; jcenter() mavenCentral() // add repository &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:2.3.3&apos; classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.2&apos; // add plugin &#125;&#125; // In your app projects build.gradle file:apply plugin: &apos;com.android.application&apos;apply plugin: &apos;org.greenrobot.greendao&apos; // apply plugin dependencies &#123; compile &apos;org.greenrobot:greendao:3.2.2&apos; // add library&#125; 具体配置看贴图 Module GradleProject Gradle gradle里面配置完了以后，新建一个entity里（相当于bean）,设置表格中所需要的属性 例如： 1234567@Entitypublic class DataEntity &#123; @Id private Long id; private String name; private String age;&#125; id 就是数据库表格中的id,类型为Long这些写完就可以直接Make Project了 然后会自动生成三个类，刚才所写的类也会变化。如下：红框里的类是生成的，代码变化也如下：1234567891011121314151617181920212223242526272829303132333435@Entitypublic class DataEntity &#123; @Id private Long id; private String name; private String age; @Generated(hash = 1668938553) public DataEntity(Long id, String name, String age) &#123; this.id = id; this.name = name; this.age = age; &#125; @Generated(hash = 1892108943) public DataEntity() &#123; &#125; public Long getId() &#123; return this.id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getName() &#123; return this.name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return this.age; &#125; public void setAge(String age) &#123; this.age = age; &#125; &#125; 至此配置就全部完成了。具体使用请参考SQLitedatabase之GreenDao进行CRUD这里我只记录了一下简单的CRUD,具体怎么使用还要根据自己的情况。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"greenDao","slug":"greenDao","permalink":"https://student9128.github.io/tags/greenDao/"}]},{"title":"SQLitedatabase之GreenDao进行CRUD","slug":"SQLitedatabase之GreenDao进行CRUD","date":"2018-01-26T08:52:05.000Z","updated":"2018-07-10T03:15:47.792Z","comments":true,"path":"2018/01/26/SQLitedatabase之GreenDao进行CRUD/","link":"","permalink":"https://student9128.github.io/2018/01/26/SQLitedatabase之GreenDao进行CRUD/","excerpt":"","text":"Android开发中使用Sqlite进行数据库开发，但是发现通过自己写SQL语句进行CRUD操作的时候有时候会出各种bug,比如用like语句的时候，偶然发生差不出来的问题。现在数据库操作第三方也很多，这里记录写GreenDao吧. 这里只记录使用方法，怎么配置请参考 关于greenDao的配置 这里仍然只贴代码，少文字叙述。 Create123456private void createDb() &#123; mDevOpenHelper = new DaoMaster.DevOpenHelper(this, DB_NAME); mDaoMaster = new DaoMaster(mDevOpenHelper.getWritableDb()); mDaoSession = mDaoMaster.newSession(); mDataEntityDao = mDaoSession.getDataEntityDao(); &#125; Insert1234private void insertData(String name, String age) &#123; DataEntity dataEntity = new DataEntity(null, name, age); mDataEntityDao.insert(dataEntity); &#125; Update1234private void update(String name, String age) &#123; DataEntity dataEntity = new DataEntity(null, name, age); mDataEntityDao.update(dataEntity); &#125; Delete1234private void delete(String name, String age) &#123; DataEntity dataEntity = new DataEntity(null, name, age); mDataEntityDao.delete(dataEntity);&#125; 这里只记录使用方法，怎么配置请参考 关于greenDao的配置 源码下载：CSDNgihtub","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"greenDao","slug":"greenDao","permalink":"https://student9128.github.io/tags/greenDao/"}]},{"title":"SQLitedatabase之SQLiteOpenHelper进行CRUD","slug":"SQLitedatabase之SQLiteOpenHelper进行CRUD","date":"2018-01-26T08:42:00.000Z","updated":"2018-07-10T03:16:23.808Z","comments":true,"path":"2018/01/26/SQLitedatabase之SQLiteOpenHelper进行CRUD/","link":"","permalink":"https://student9128.github.io/2018/01/26/SQLitedatabase之SQLiteOpenHelper进行CRUD/","excerpt":"","text":"众所周知，Android开发中使用数据库Sqlite.这里简单记录一下SQLite的使用。 这里按CRUD顺序进行简单记录下： 直接贴操作代码，文字叙述没什么用！^_^ 首先是DatabaseHelper 123456789101112131415161718192021222324252627282930313233343536373839public class DatabaseHelper extends SQLiteOpenHelper &#123; private static final int DB_VERSION = 7;//数据库版本，进行手动更新 private static final String DB_NAME = &quot;SQLiteTest.db&quot;; private static final String TAG = &quot;DatabaseHelper.class&quot;; private static final String SQLITETABLE = &quot;sqliteTable&quot;; private static final String AGE = &quot;age&quot;; private static final String NAME = &quot;name&quot;; public DatabaseHelper(Context context) &#123; this(context, DB_NAME, DB_VERSION); &#125; public DatabaseHelper(Context context, int version) &#123; this(context, DB_NAME, version); &#125; public DatabaseHelper(Context context, String name, int version) &#123; this(context, name, null, version); &#125; public DatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123; super(context, name, factory, version); &#125; @Override public void onCreate(SQLiteDatabase db) &#123; String sql = &quot;create table if not exists &quot; + SQLITETABLE + &quot;(id INTEGER primary key autoincrement,&quot; + NAME + &quot; TEXT,&quot; + AGE + &quot; TEXT)&quot;; db.execSQL(sql); Log.d(TAG, &quot;onCreate: create database&quot;); &#125; @Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123; db.execSQL(&quot;drop table if exists sqliteTable&quot;); onCreate(db); Log.d(TAG, &quot;upgrade database&quot;); &#125;&#125; Create我这里将所有方法写到DatabaseDao类里面 123public DatabaseDao(Context context) &#123; databaseHelper = new DatabaseHelper(context); &#125; 在需要调用的类中直接new DatabaseDao(this)即可初始化创建数据库表 Insert123456 public void insert(String x, String age) &#123; String sql = &quot;insert into &quot; + SQLITETABLE + &quot;(name,age) values(?,?)&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase();// String x = &quot;x&quot;; sqLiteDatabase.execSQL(sql, new String[]&#123;x, age&#125;); &#125; 总结：insert into tableName(column1,column2...) values(?,?...) RetrieveList retrieveName(List dataBeans, String name) &#123;12345678910111213141516171819202122232425262728293031323334 dataBeans.clear(); String s = &quot;select * from &quot; + SQLITETABLE + &quot; where name =?&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); Cursor cursor = sqLiteDatabase.rawQuery(s, new String[]&#123;name&#125;); if (cursor.moveToFirst()) &#123; while (cursor.moveToNext()) &#123; String name1 = cursor.getString(cursor.getColumnIndex(&quot;name&quot;)); String age1 = cursor.getString(cursor.getColumnIndex(&quot;age&quot;)); Log.d(TAG, &quot;retrieveName: name=&quot; + name1 + &quot;,age=&quot; + age1); DataBean dataBean = new DataBean(); dataBean.setName(name1); dataBean.setAge(age1); dataBeans.add(dataBean); &#125; &#125; return dataBeans;&#125;public List&lt;DataBean&gt; retrieveAge(List&lt;DataBean&gt; dataBeans, String age) &#123; String sql = &quot;select * from &quot; + SQLITETABLE + &quot; where age=?&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); Cursor cursor = sqLiteDatabase.rawQuery(sql, new String[]&#123;age&#125;); if (cursor.moveToFirst()) &#123; while (cursor.moveToNext()) &#123; String name1 = cursor.getString(cursor.getColumnIndex(&quot;name&quot;)); String age1 = cursor.getString(cursor.getColumnIndex(&quot;age&quot;)); Log.d(TAG, &quot;retrieveAge: name=&quot; + name1 + &quot;,age=&quot; + age1); DataBean dataBean = new DataBean(); dataBean.setName(name1); dataBean.setAge(age1); dataBeans.add(dataBean); &#125; &#125; return dataBeans; 总结：select * from tableName where column=?通过SQL语句筛选，通过sqliteDatabase进行rawQuery进行相应查询sqLiteDatabase.rawQuery(sql, new String[]{age}); 12345public void updateName(String age, String newName) &#123; String sql = &quot;update sqliteTable set name=&apos;&quot; + newName + &quot;&apos; where age=&apos;&quot; + age + &quot;&apos;&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); sqLiteDatabase.execSQL(sql);&#125; 总结：update tableName set column = ‘x’ where column2=&#39;y&#39; 需要指出的是，我在使用这个语句的时候需要加‘’才成功，不然会报错。 Delete1234567891011public void deleteName(String name) &#123; String sql = &quot;delete from &quot; + SQLITETABLE + &quot; where name=&apos;&quot; + name + &quot;&apos;&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); sqLiteDatabase.execSQL(sql); &#125; public void deleteAge(String age) &#123; String sql = &quot;delete from &quot; + SQLITETABLE + &quot; where age=&quot; + age + &quot;&quot;; sqLiteDatabase = databaseHelper.getWritableDatabase(); sqLiteDatabase.execSQL(sql); &#125; 总结：delete from tableName where column=&#39;x&#39;需要指出的是，我在使用这个语句的时候需要加‘’才成功，不然会报错。 结语，这篇文章没什么东西，都是通过简单的SQL语句实现，当然对于insert,update等也可以通过ContentValues来实现，我这里没那样写。关于greenDao的使用请参考 SQLitedatabase之GreenDao进行CRUD 源码下载：CSDNgihtub","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"sqlite","slug":"sqlite","permalink":"https://student9128.github.io/tags/sqlite/"}]},{"title":"Error:Execution failed for task ':app:packageDebug'解决方案","slug":"Error-Execution-failed-for-task-app-packageDebug-解决方案","date":"2017-12-20T02:22:13.000Z","updated":"2018-07-10T03:18:13.406Z","comments":true,"path":"2017/12/20/Error-Execution-failed-for-task-app-packageDebug-解决方案/","link":"","permalink":"https://student9128.github.io/2017/12/20/Error-Execution-failed-for-task-app-packageDebug-解决方案/","excerpt":"","text":"12Error:Execution failed for task &apos;:app:packageDebug&apos;.&gt; java.io.IOException: Could not delete path &apos;E:\\ADemo1\\ListViewTest\\app\\build\\intermediates\\incremental\\packageDebug\\file-input-save-data.txt&apos;. 最近发现build的时候工程里总是报这类错误，这里记录下，很明显的是由于txt文件无法删除，进入相应目录进行手动删除即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"高德地图（二）之显示定位，比例尺和添加Marker","slug":"高德地图（二）之显示定位，比例尺和添加Marker","date":"2017-12-09T05:22:46.000Z","updated":"2018-07-10T05:30:32.455Z","comments":true,"path":"2017/12/09/高德地图（二）之显示定位，比例尺和添加Marker/","link":"","permalink":"https://student9128.github.io/2017/12/09/高德地图（二）之显示定位，比例尺和添加Marker/","excerpt":"","text":"上一篇记录了高德地图的简单集成。只是初始化了地图，没有实现任何功能。这篇文章记录下定位功能和添加marker标记。 声明：本篇文章所以代码皆来自官方文档，我只是拼接了下。 效果图 效果图是这样的 定位下面直接记录定位实现过程 在onCreate里添加下面代码，这里需要实现一个接口。123456 //初始化地图控制器对象 AMap aMap = mMapView.getMap();// 设置定位监听 aMap.setLocationSource(this);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false aMap.setMyLocationEnabled(true); 实现的方法：12345678910111213141516171819202122232425262728293031323334353637383940414243 @Override public void activate(OnLocationChangedListener onLocationChangedListener) &#123; mListener = onLocationChangedListener; if (mlocationClient == null) &#123; //初始化定位 mlocationClient = new AMapLocationClient(this); //初始化定位参数 mLocationOption = new AMapLocationClientOption(); //设置定位回调监听 mlocationClient.setLocationListener(this); //设置为高精度定位模式 mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy); //设置定位参数 mlocationClient.setLocationOption(mLocationOption); // 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗， // 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用stopLocation()方法来取消定位请求 // 在定位结束后，在合适的生命周期调用onDestroy()方法 // 在单次定位情况下，定位无论成功与否，都无需调用stopLocation()方法移除请求，定位sdk内部会移除 mlocationClient.startLocation();//启动定位 &#125; &#125; @Override public void deactivate() &#123; mListener = null; if (mlocationClient != null) &#123; mlocationClient.stopLocation(); mlocationClient.onDestroy(); &#125; mlocationClient = null; &#125;@Override public void onLocationChanged(AMapLocation aMapLocation) &#123; if (mListener != null&amp;&amp;aMapLocation != null) &#123; if (aMapLocation != null &amp;&amp;aMapLocation.getErrorCode() == 0) &#123; mListener.onLocationChanged(aMapLocation);// 显示系统小蓝点 &#125; else &#123; String errText = &quot;定位失败,&quot; + aMapLocation.getErrorCode()+ &quot;: &quot; + aMapLocation.getErrorInfo(); Log.e(&quot;AmapErr&quot;,errText); &#125; &#125; &#125; 重写生命周期 123456789101112131415161718192021222324252627282930@Override protected void onDestroy() &#123; super.onDestroy(); //在activity执行onDestroy时执行mMapView.onDestroy()，销毁地图 mMapView.onDestroy(); if(null != mlocationClient)&#123; mlocationClient.onDestroy(); &#125; &#125; @Override protected void onResume() &#123; super.onResume(); //在activity执行onResume时执行mMapView.onResume ()，重新绘制加载地图 mMapView.onResume(); &#125; @Override protected void onPause() &#123; super.onPause(); //在activity执行onPause时执行mMapView.onPause ()，暂停地图的绘制 mMapView.onPause(); &#125; @Override protected void onSaveInstanceState(Bundle outState) &#123; super.onSaveInstanceState(outState); //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，保存地图当前的状态 mMapView.onSaveInstanceState(outState); &#125; 至此，定位功能已经实现。但是并没有显示定位蓝点，也就是我们常见的那个定位标记。 显示定位蓝点 1aMap.setMyLocationEnabled(true);// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。 对定位蓝点进行自定义 你会发现效果图中的精度圈跟默认的不同，就是在这里自定义的。12345 MyLocationStyle myLocationStyle; myLocationStyle = new MyLocationStyle();//初始化定位蓝点样式类 // myLocationStyle.interval(2000); //设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。 //myLocationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(R.mipmap.ic_map_location));//定位自定义图标myLocationStyle.strokeColor(Color.CYAN); //精度圈自定义 myLocationStyle.radiusFillColor(Color.argb(50,38,165,153)) ;//精度圈自定义 myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATE);//只定位一次。aMap.setMyLocationStyle(myLocationStyle);//设置定位蓝点的Style 添加Marker地图上往往有一些标记成为marker.现在很多app地图里都有好多marker，最具代表性的就是共享单车app 示例代码如下：你可以根据自己的需求进行自行添加，拿到经纬度即可。 12aMap.addMarker(new MarkerOptions().position(new LatLng(31.238075,121.662691)).title(&quot;上海&quot;)); aMap.addMarker(new MarkerOptions().position(new LatLng(31.238403,121.661902)).title(&quot;上海&quot;)); 设置缩放级别1aMap.moveCamera(CameraUpdateFactory.zoomTo(15)); 设置比例尺和定位按钮123uiSettings = aMap.getUiSettings();uiSettings.setMyLocationButtonEnabled(true);//设置默认定位按钮是否显示，非必需设置。uiSettings.setScaleControlsEnabled(true);//控制比例尺控件是否显示 个人集成的时候和大家一样，也是一点点扒官网代码来的。这里把这些给贴出来。有需求的可以复制。 比较推荐通过官方文档进行学习，可能有些不清楚的地方需要网上搜索。毕竟有时候真的在官方文档找不到。 这里我偷懒了，都是粘贴一堆代码，还望见谅。重在实现功能吧。^_^ Demo下载 github暂时未传，回头完善了再传","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"高德地图","slug":"高德地图","permalink":"https://student9128.github.io/tags/高德地图/"}]},{"title":"高德地图（一）之简单集成","slug":"高德地图（一）之简单集成","date":"2017-12-09T04:41:39.000Z","updated":"2018-07-10T03:21:54.756Z","comments":true,"path":"2017/12/09/高德地图（一）之简单集成/","link":"","permalink":"https://student9128.github.io/2017/12/09/高德地图（一）之简单集成/","excerpt":"","text":"谈集成方案，无非就是按照官方文档搞一遍。这里不多赘述，和别的博客差不多，都是直接贴过程。我这里使用Android Studio，不再使用添加jar包，so文件的方案了。直接通过Gradle来集成。 一、申请Key声明：该部分截图来自官网注册完账号，进入后台，直接按照下图进行。 关于SHA1值获取，这里只说通过CMD来获取的方式：进入key文件所在路径，通过keytool -list -v -keystore key名字来获取如下图： 二、在Android Studio中集成这里仅通过gradle集成。个人感觉更快速方便。 app gradle文件 12345678//3D地图 compile &apos;com.amap.api:3dmap:latest.integration&apos; // 定位功能 compile &apos;com.amap.api:location:latest.integration&apos; // 搜索功能 compile &apos;com.amap.api:search:latest.integration&apos; //2D地图 compile &apos;com.amap.api:map2d:latest.integration&apos; 清单文件 123456789101112131415161718192021&lt;!--用于进行网络定位--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于访问GPS定位--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于获取运营商信息，用于支持提供运营商信息相关的接口--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于访问网络，网络定位需要上网--&gt;&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于读取手机当前的状态--&gt;&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于写入缓存数据到扩展存储卡--&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于申请调用A-GPS模块--&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot;&gt;&lt;/uses-permission&gt;&lt;!--用于申请获取蓝牙信息进行室内定位--&gt;&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;&gt;&lt;/uses-permission&gt;&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;&gt;&lt;/uses-permission&gt; application里面添加如下 123456789&lt;application ...&gt; &lt;!--高德地图集成--&gt; &lt;!--高德地图开始--&gt; &lt;meta-data android:name=&quot;com.amap.api.v2.apikey&quot; android:value=&quot;你申请的key&quot;/&gt; &lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt; &lt;!--高德地图结束--&gt; &lt;/application&gt; 代码混淆 123456789101112131415161718192021222324253D 地图 V5.0.0之前： -keep class com.amap.api.maps.**&#123;*;&#125; -keep class com.autonavi.amap.mapcore.*&#123;*;&#125; -keep class com.amap.api.trace.**&#123;*;&#125; 3D 地图 V5.0.0之后： -keep class com.amap.api.maps.**&#123;*;&#125; -keep class com.autonavi.**&#123;*;&#125; -keep class com.amap.api.trace.**&#123;*;&#125; 定位 -keep class com.amap.api.location.**&#123;*;&#125; -keep class com.amap.api.fence.**&#123;*;&#125; -keep class com.autonavi.aps.amapapi.model.**&#123;*;&#125; 搜索 -keep class com.amap.api.services.**&#123;*;&#125; 2D地图 -keep class com.amap.api.maps2d.**&#123;*;&#125; -keep class com.amap.api.mapcore2d.**&#123;*;&#125; 导航 -keep class com.amap.api.navi.**&#123;*;&#125; -keep class com.autonavi.**&#123;*;&#125; 注意：这里要提醒一点是，申请key的时候如果只填写了发布版是SHA1值，个人建议在Gradle中添加下面的代码，可以在debug中正常使用key 12345678910buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; signingConfig signingConfigs.release &#125; debug &#123; signingConfig signingConfigs.release//使用签名文件 &#125; &#125; 三、实现效果基本配置完成了，剩下的就是在app里展示地图效果了 布局 12345&lt;com.amap.api.maps.MapView android:id=&quot;@+id/map_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;/com.amap.api.maps.MapView&gt; 1&gt;代码 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); mapView.onCreate(savedInstanceState); aMap = mapView.getMap(); }` 效果只进行了初始化，并不能定位到你所在位置。 更多请查看第二篇高德地图（二）之显示定位，比例尺和添加Marker","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"高德地图","slug":"高德地图","permalink":"https://student9128.github.io/tags/高德地图/"}]},{"title":"百度地图基本功能实现","slug":"百度地图基本功能实现","date":"2017-11-02T03:19:23.000Z","updated":"2018-07-10T06:07:05.269Z","comments":true,"path":"2017/11/02/百度地图基本功能实现/","link":"","permalink":"https://student9128.github.io/2017/11/02/百度地图基本功能实现/","excerpt":"","text":"之前只是简单集成百度地图，但是并没有实现我们平时想要的功能。譬如点击获取定位，切换路况交通图，卫星图，对地图的缩放等 布局12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;RelativeLayout android:id=&quot;@+id/fl_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;com.baidu.mapapi.map.MapView android:id=&quot;@+id/bd_map_view&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot; android:clickable=&quot;true&quot; /&gt; &lt;LinearLayout android:id=&quot;@+id/ll_scale_control&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;@dimen/uniform_margin&quot; android:background=&quot;@drawable/bg_btn_map&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_plus&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:padding=&quot;@dimen/padding_10&quot; android:src=&quot;@drawable/ic_map_plus&quot; /&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;1px&quot; android:background=&quot;@color/gray_13&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_minus&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:padding=&quot;@dimen/padding_10&quot; android:src=&quot;@drawable/ic_map_minus&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=&quot;@+id/ll_traffic&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_above=&quot;@id/ll_scale_control&quot; android:layout_marginBottom=&quot;@dimen/margin_10&quot; android:layout_marginLeft=&quot;@dimen/uniform_margin&quot; android:background=&quot;@drawable/bg_btn_map&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_traffic&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:paddingLeft=&quot;@dimen/padding_10&quot; android:paddingRight=&quot;@dimen/padding_10&quot; android:paddingTop=&quot;@dimen/padding_10&quot; android:src=&quot;@drawable/ic_map_traffic_close&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; android:gravity=&quot;center&quot; android:paddingBottom=&quot;@dimen/padding_10&quot; android:text=&quot;路况&quot; android:textSize=&quot;@dimen/textSize10&quot; /&gt; &lt;/LinearLayout&gt; &lt;ImageView android:id=&quot;@+id/iv_view&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:layout_marginBottom=&quot;@dimen/margin_10&quot; android:layout_above=&quot;@id/ll_traffic&quot; android:layout_marginLeft=&quot;@dimen/uniform_margin&quot; android:layout_marginTop=&quot;@dimen/margin_20&quot; android:background=&quot;@drawable/bg_btn_map&quot; android:padding=&quot;@dimen/padding_10&quot; android:src=&quot;@drawable/ic_map_view&quot; /&gt; &lt;ImageView android:id=&quot;@+id/iv_location&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:layout_below=&quot;@id/ll_scale_control&quot; android:layout_marginLeft=&quot;@dimen/uniform_margin&quot; android:layout_marginTop=&quot;@dimen/margin_20&quot; android:background=&quot;@drawable/bg_btn_map&quot; android:padding=&quot;@dimen/padding_10&quot; android:src=&quot;@drawable/ic_map_my_location&quot; /&gt; &lt;/RelativeLayout&gt; 获取定位123456789101112 isFirstLoc = true;// 开启定位图层//mBaiduMap.setMyLocationEnabled(true);//// 定位初始化mLocClient = new LocationClient(this);mLocClient.registerLocationListener(myListener);LocationClientOption option = new LocationClientOption();option.setOpenGps(true); // 打开gpsoption.setCoorType(&quot;bd09ll&quot;); // 设置坐标类型option.setScanSpan(1000);mLocClient.setLocOption(option);mLocClient.start(); 定位监听函数 123456789101112131415161718192021222324252627282930 /** * 定位SDK监听函数 */public class MyLocationListenner implements BDLocationListener &#123;@Overridepublic void onReceiveLocation(BDLocation location) &#123;// map view 销毁后不在处理新接收的位置if (location == null || bdMapView == null) &#123;return;&#125;mCurrentLat = location.getLatitude();mCurrentLon = location.getLongitude();mCurrentAccracy = location.getRadius();locData = new MyLocationData.Builder().accuracy(300)//.accuracy(location.getRadius())// 此处设置开发者获取到的方向信息，顺时针0-360.direction(mCurrentDirection).latitude(location.getLatitude()).longitude(location.getLongitude()).build();mBaiduMap.setMyLocationData(locData);if (isFirstLoc) &#123;isFirstLoc = false;LatLng ll = new LatLng(location.getLatitude(),location.getLongitude());MapStatus.Builder builder = new MapStatus.Builder();builder.target(ll).zoom(18.0f);mBaiduMap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));&#125;&#125; 切换路况交通图 if (!isTrafficOpen) { showToast(&quot;实时路况打开&quot;); mBaiduMap.setTrafficEnabled(true); ivTraffic.setImageResource(R.drawable.ic_map_traffic_open); isTrafficOpen = !isTrafficOpen; } else { showToast(&quot;实时路况关闭&quot;); mBaiduMap.setTrafficEnabled(false); ivTraffic.setImageResource(R.drawable.ic_map_traffic_close); isTrafficOpen = !isTrafficOpen; } 切换卫星图if (!isViewcSwitch) { showToast(&quot;切换卫星视图&quot;); mBaiduMap.setMapType(BaiduMap.MAP_TYPE_SATELLITE); isViewcSwitch = !isViewcSwitch; } else { showToast(&quot;卫星视图关闭&quot;); mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL); isViewcSwitch = !isViewcSwitch; } 缩放if (mCurrentZoomLevel &lt; 7) { ivMinus.setEnabled(false); ivMinus.setImageResource(R.drawable.ic_map_minus_gray); } else { mBaiduMap.setMapStatus(MapStatusUpdateFactory.zoomOut()); ivPlus.setEnabled(true); ivPlus.setImageResource(R.drawable.ic_map_plus); ivMinus.setEnabled(true); ivMinus.setImageResource(R.drawable.ic_map_minus); } 修改自定义marker// 修改为自定义marker mCurrentMarker = BitmapDescriptorFactory .fromResource(R.drawable.ic_map_location); mBaiduMap.setMyLocationConfiguration(new MyLocationConfiguration( mCurrentMode, true, mCurrentMarker, getMyColor(R.color.mapColor), getMyColor(R.color.mapColor))); 源码下载","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"百度地图","slug":"百度地图","permalink":"https://student9128.github.io/tags/百度地图/"}]},{"title":"百度地图的集成","slug":"百度地图的集成","date":"2017-10-18T14:31:10.000Z","updated":"2018-07-10T05:35:17.070Z","comments":true,"path":"2017/10/18/百度地图的集成/","link":"","permalink":"https://student9128.github.io/2017/10/18/百度地图的集成/","excerpt":"","text":"关于KS系列，一直想把东西都写的差不多了，再写文章。但是不同步写文章，时间久了，又会忘记。很尴尬。也不是系统性的，是想到哪记到哪。首先写一篇百度地图吧。 效果图 关于集成：这一部分同其他SDK的集成都是大同小异的： 首先去百度开放平台创建应用申请密钥 根据开放指南进行集成 我这里使用的AndroidStudio,就按照AndroidStudio的集成来记录 将下载好的SDK文件中的.so文件放入jniLibs(目录：appsrc/main/jniLibs)文件夹，jar包放入libs（目录：app/libs）文件夹 清单文件中添加权限：12345678910&lt;!--百度地图--&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; &lt;uses-permission android:name=&quot;com.android.launcher.permission.READ_SETTINGS&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.GET_TASKS&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot; /&gt; 123&lt;meta-data android:name=&quot;com.baidu.lbsapi.API_KEY&quot; android:value=&quot;你自己申请的key&quot; /&gt; 代码123456789public class BaseApplication extends Application &#123;@Overridepublic void onCreate() &#123;super.onCreate();/********百度地图**********/SDKInitializer.initialize(getApplicationContext());//百度地图初始化&#125; 混淆方法123-keep class com.baidu.** &#123;*;&#125;-keep class vi.com.** &#123;*;&#125; -dontwarn com.baidu.** 这样运行起来就可以展示地图了 但是这只是最简单的集成，更多定制请看后续文章。^_^ 源码下载","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"百度地图","slug":"百度地图","permalink":"https://student9128.github.io/tags/百度地图/"}]},{"title":"Android Studio 3.0去掉方法参数提示","slug":"Android-Studio-3-0去掉方法参数提示","date":"2017-09-30T05:08:00.000Z","updated":"2018-07-10T05:41:59.148Z","comments":true,"path":"2017/09/30/Android-Studio-3-0去掉方法参数提示/","link":"","permalink":"https://student9128.github.io/2017/09/30/Android-Studio-3-0去掉方法参数提示/","excerpt":"","text":"升级到3.0之后，最明显的一个就是在调用方法的时候多了一个参数提示。有利有弊，看着不是很舒服。就想去掉。 提示样式如下： 去掉提示：","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"解决Sources for 'Android API 26 Platform' not found","slug":"解决Sources-for-Android-API-26-Platform-not-found","date":"2017-09-14T05:30:27.000Z","updated":"2018-07-10T05:44:49.431Z","comments":true,"path":"2017/09/14/解决Sources-for-Android-API-26-Platform-not-found/","link":"","permalink":"https://student9128.github.io/2017/09/14/解决Sources-for-Android-API-26-Platform-not-found/","excerpt":"","text":"相信很多使用Android 26的童鞋都遇到过这个问题。26的源码找不到。SDK里面也没有下载选项。随便点开一个就是这种情况： 废话不多说：上解决方案： 在..\\Android\\sdk\\sources\\路径下，将之前下载的源码版本复制一份该文件夹名字为android-26,打开文件夹将package.xml,source.properties文件里的版本号改为26，然后重启下AndroidStudio即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"仿购物阅读类app的分类界面","slug":"仿购物阅读类app的分类界面","date":"2017-08-26T07:52:57.000Z","updated":"2018-07-10T05:46:59.640Z","comments":true,"path":"2017/08/26/仿购物阅读类app的分类界面/","link":"","permalink":"https://student9128.github.io/2017/08/26/仿购物阅读类app的分类界面/","excerpt":"","text":"本文标题是仿购物阅读类app的分类界面，因为大多数app的分类界面都是这样，尤购物类阅读类居多。本文效果是仿京东阅读分类界面。 之前无意安装了京东阅读，无意中看到了一个分类界面，感觉效果很好，就想写下来。于是乎有了下面的效果。写好了好长时间了，终于今天找个时间把这个记录下来。 效果图 上面是京东阅读分裂界面的效果图， Demo效果图 刚开始写的时候想了个思路是左边利用RecyclerView,右边使用Fragment，后来发现这个思路不可取，而且麻烦。其实两边利用两个Fragment是可以的，这样想是由于平板上通常使用左右两个fragment。但是后来想到直接使用两个RecyclerView分别显示在左右两边不是更简单。所以这里的效果是直接使用两个RecyclerView分别显示在左右两边来实现的。这里遇到了俩问题，第一个就是点击左侧，切换的情况，因为左侧有个带颜色的竖条，不是简单的加状态选择器就可以实现的。这里稍微想了下，通过如下方法实现的。或许有的同学有更好的方法，还请告知下。 代码 1234567891011121314151617181920212223@Overridepublic void onBindViewHolder(final MyViewHolder holder, final int position) &#123; holder.textView.setText(data.get(position)); holder.textView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; index = position; if (listener != null) &#123; listener.onLeftItemClick(position); &#125; notifyDataSetChanged(); &#125; &#125;); if (index == position) &#123; holder.textView.setBackgroundColor(ContextCompat.getColor(context, R.color.white_1)); holder.textView.setTextColor(ContextCompat.getColor(context, R.color.blue)); holder.viewLine.setVisibility(View.VISIBLE); &#125; else &#123; holder.textView.setBackgroundColor(ContextCompat.getColor(context, R.color.white)); holder.textView.setTextColor(ContextCompat.getColor(context, R.color.black)); holder.viewLine.setVisibility(View.GONE); &#125;&#125; 这里我通过定义一个index来切换点击和为点击的效果。 第二个问题就是怎么让点击的条目滑动到顶部。这里也上网搜了一番，找了一个代码，但是有bug，无法实现平稳滑动的效果。这里在原有基础上改了一点点。由于这个代码写的时间有点长了，实在不知道在怎么找到原作者了，不然一定会附上链接，这里表示抱歉. 这里主要实现平稳滑动的关键是使用了插值器LinearInterpolator()匀速滑动 下面附上关键代码： 下面是点击左边实现滑动的关键代码。其他代码详细搭建都会写，就是RecyclerView们和他们的adapter们。o(￣︶￣)o123456789101112131415161718192021222324252627282930313233343536373839 @Override public void onLeftItemClick(int position) &#123; taskPasition = dataTitle.get(position); List&lt;String&gt; lineType = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; Math.random() * 10; i++) &#123; lineType.add(Integer.parseInt(new DecimalFormat(&quot;0&quot;).format(Math.random() * 10)) + &quot;&quot;); &#125; indexQueryRightAdapter.updateData(lineType); scrollToTop(position); &#125; @Override public void onRightItemClick(int position) &#123;// showToast(&quot;You clicked:\\t&quot; + position); ToastUtils.showKevinToast(this, &quot;You clicked:\\t&quot; + position, R.drawable.ic_tip); &#125; private void scrollToTop(int n) &#123; //先从RecyclerView的LayoutManager中获取第一项和最后一项的Position int firstItem = mLinearLayoutManager.findFirstVisibleItemPosition(); int lastItem = mLinearLayoutManager.findLastVisibleItemPosition(); printLogd(&quot;firstItem:\\t&quot; + firstItem); printLogd(&quot;lastItem:\\t&quot; + lastItem); //然后区分情况 if (n &lt;= firstItem) &#123; //当要置顶的项在当前显示的第一个项的前面时// rvRecyclerView.scrollToPosition(n);//有bug mRecyclerView.smoothScrollBy(0, mRecyclerView.getChildAt(n - firstItem).getTop(), new LinearInterpolator()); &#125; else if (n &lt;= lastItem) &#123; //当要置顶的项已经在屏幕上显示时 int top = mRecyclerView.getChildAt(n - firstItem).getTop();//当前情景下其实只执行这行代码，可以不区分情况 mRecyclerView.smoothScrollBy(0, top, new LinearInterpolator());// mRecyclerView.smoothScrollToPosition(n); &#125; else &#123; //当要置顶的项在当前显示的最后一项的后面时 mRecyclerView.scrollToPosition(n); &#125; &#125; 看到布局就会发现真的很简单12345678910111213141516171819&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@color/white_1&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/rv_recycler_view_left&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot;&gt;&lt;/android.support.v7.widget.RecyclerView&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/rv_recycler_view_right&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;3&quot;&gt;&lt;/android.support.v7.widget.RecyclerView&gt;&lt;/LinearLayout&gt; 是不是很简单? 另外注意，如果你使用RecyclerView很少，这里提醒下需要注意到的坑。 1234567@Overridepublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View view = LayoutInflater.from(context).inflate(R.layout.adapter_item_recycler_left, parent, false);//注意此处不要用(@ResLayout resLayout,null)这样的形式 MyViewHolder myViewHolder = new MyViewHolder(view); return myViewHolder;&#125; 有喜欢效果里那个Toast效果的的可以参见这里(^o^)/~ Demo下载github","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Card Flip Animations的实现","slug":"Card-Flip-Animations的实现","date":"2017-08-17T07:11:57.000Z","updated":"2018-07-10T05:51:10.553Z","comments":true,"path":"2017/08/17/Card-Flip-Animations的实现/","link":"","permalink":"https://student9128.github.io/2017/08/17/Card-Flip-Animations的实现/","excerpt":"","text":"本文介绍一下Card Flip Animations的实现。 声明：本文完全参考Google官网Displaying Card Flip Animations 效果图 官方效果 该效果主要依靠objectAnimation,在Activity中切换两个Fragment实现. 下面直接上代码 Activity类 123456789101112131415161718192021222324252627282930public class LoginActivity extends AppCompatActivity implements LoginFragment.OnForgetListener, ForgetPasswordFragment.OnBackListener &#123; @BindView(R.id.fl_content) FrameLayout flContent; @Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_login); ButterKnife.bind(this);// if (savedInstanceState == null) &#123; FragmentTransaction beginTransaction = getFragmentManager().beginTransaction(); beginTransaction.add(R.id.fl_content, new LoginFragment()).commit(); &#125; @Override public void forgetPassword() &#123; getFragmentManager().beginTransaction() .setCustomAnimations(R.animator.card_flip_left_in, R.animator.card_flip_left_out, R.animator.card_flip_right_in, R.animator.card_flip_right_out) .replace(R.id.fl_content, new ForgetPasswordFragment()) .addToBackStack(null).commit(); &#125; @Override public void goBack() &#123; getFragmentManager().popBackStack(); &#125;&#125; 两个Fragment类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class LoginFragment extends DialogFragment implements View.OnClickListener &#123; @BindView(R.id.et_user_name) EditText etUserName; @BindView(R.id.et_password) EditText etPassword; @BindView(R.id.cb_auto_login) CheckBox cbAutoLogin; @BindView(R.id.tv_forget_pwd) TextView tvForgetPwd; Unbinder unbinder; @Override public void onAttach(Activity context) &#123; super.onAttach(context); try &#123; mCallback = (OnForgetListener) context; &#125; catch (ClassCastException e) &#123; throw new ClassCastException(context.toString() + &quot;must implement OnForgetListener&quot;); &#125; &#125; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; View mView = inflater.inflate(R.layout.fragment_login, container, false); unbinder = ButterKnife.bind(this, mView); tvForgetPwd.setOnClickListener(this); return mView; &#125; @Override public void onDestroyView() &#123; super.onDestroyView(); unbinder.unbind(); &#125; OnForgetListener mCallback; @Override public void onClick(View view) &#123; mCallback.forgetPassword(); &#125; public interface OnForgetListener &#123; void forgetPassword(); &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class ForgetPasswordFragment extends Fragment implements View.OnClickListener &#123; Unbinder unbinder; @BindView(R.id.et_email) EditText etEmil; @BindView(R.id.btn_back) Button btnBack; @Override public void onAttach(Activity activity) &#123; super.onAttach(activity); try &#123; mCallback = (OnBackListener) activity; &#125; catch (ClassCastException e) &#123; throw new ClassCastException(activity.toString() + &quot;must implement OnBackListener&quot;); &#125; &#125; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; View mView = inflater.inflate(R.layout.fragment_forget_password, container, false); unbinder = ButterKnife.bind(this, mView); btnBack.setOnClickListener(this); return mView; &#125; @Override public void onDestroyView() &#123; super.onDestroyView(); unbinder.unbind(); &#125; OnBackListener mCallback; @Override public void onClick(View view) &#123; mCallback.goBack(); &#125; public interface OnBackListener &#123; void goBack(); &#125;&#125; 关于3D翻转效果的更好实现可以参考文章Android实现dialog的3D翻转 源码中有3D翻转效果的实现 Demo下载","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Android实现dialog的3D翻转","slug":"Android实现dialog的3D翻转","date":"2017-08-17T06:24:40.000Z","updated":"2018-07-10T05:50:20.904Z","comments":true,"path":"2017/08/17/Android实现dialog的3D翻转/","link":"","permalink":"https://student9128.github.io/2017/08/17/Android实现dialog的3D翻转/","excerpt":"","text":"本文实现了Android中dialog的3D翻转效果。这里通过一个简单的应用场景记录下。 效果图 起初自己的思路是Activity进行界面跳转实现旋转效果，网上看了很多，写下来发现效果不对。之后又看到Google上面的Card Flid Animation效果是这样的。 看着确实不错，然而拿下来demo放慢翻转速度后发现，不是我想要的。但是跟我看到的一个app里面的效果一样然后想改成dialog试试效果，发现更是不行了。 Card Flid Animation效果如下：这个是通过Activity来切换Fragment实现的，可以看到区别是翻转时候貌似会变大，其实没用，只是翻转后的视觉问题。 听说openGl比较麻烦，并且没有用过。然后就搜了下Rotate3DAnimaitons。搜到了这篇文章http://blog.csdn.net/growing_tree/article/details/50428148所以这篇文章里的实现方法不是我的原创，是参考人家的。在这里感谢这位大神。不过他这个是activity里的，我就想要一个dialog效果，因为电脑上TIM的打开红包这个3D效果看着不错，其实大同小异，就拿过来改成Dialog。对于Rotate3DAnimaitons这篇文章已经很详细了，有需要的可以参考下。 这里也贴下Rotate3dAnimation 的代码 简单加了两行注释 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/** * An animation that rotates the view on the Y axis between two specified angles. * This animation also adds a translation on the Z axis (depth) to improve the effect. */public class Rotate3dAnimation extends Animation &#123; private final float mFromDegrees; private final float mToDegrees; private final float mCenterX; private final float mCenterY; private final float mDepthZ; private final boolean mReverse; private Camera mCamera; /** * Creates a new 3D rotation on the Y axis. The rotation is defined by its * start angle and its end angle. Both angles are in degrees. The rotation * is performed around a center point on the 2D space, definied by a pair * of X and Y coordinates, called centerX and centerY. When the animation * starts, a translation on the Z axis (depth) is performed. The length * of the translation can be specified, as well as whether the translation * should be reversed in time. * * @param fromDegrees the start angle of the 3D rotation //起始角度 * @param toDegrees the end angle of the 3D rotation //结束角度 * @param centerX the X center of the 3D rotation //x中轴线 * @param centerY the Y center of the 3D rotation //y中轴线 * @param reverse true if the translation should be reversed, false otherwise//是否反转 */ public Rotate3dAnimation(float fromDegrees, float toDegrees, float centerX, float centerY, float depthZ, boolean reverse) &#123; mFromDegrees = fromDegrees; mToDegrees = toDegrees; mCenterX = centerX; mCenterY = centerY; mDepthZ = depthZ;//Z轴移动的距离，这个来影响视觉效果，可以解决flip animation那个给人看似放大的效果 mReverse = reverse; &#125; @Override public void initialize(int width, int height, int parentWidth, int parentHeight) &#123; super.initialize(width, height, parentWidth, parentHeight); mCamera = new Camera(); &#125; @Override protected void applyTransformation(float interpolatedTime, Transformation t) &#123; final float fromDegrees = mFromDegrees; float degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime); final float centerX = mCenterX; final float centerY = mCenterY; final Camera camera = mCamera; final Matrix matrix = t.getMatrix(); Log.i(&quot;interpolatedTime&quot;, interpolatedTime+&quot;&quot;); camera.save(); if (mReverse) &#123; camera.translate(0.0f, 0.0f, mDepthZ * interpolatedTime); &#125; else &#123; camera.translate(0.0f, 0.0f, mDepthZ * (1.0f - interpolatedTime)); &#125; camera.rotateY(degrees); camera.getMatrix(matrix); camera.restore(); matrix.preTranslate(-centerX, -centerY); matrix.postTranslate(centerX, centerY); &#125;&#125; dialog实现3D翻转代码， 说明：动画部分的代码是拿的搜的的那篇文章的public class MyDialog extends Dialog &#123; @BindView(R.id.et_user_name) EditText etUserName; @BindView(R.id.et_password) EditText etPassword; @BindView(R.id.cb_auto_login) CheckBox cbAutoLogin; @BindView(R.id.tv_forget_pwd) TextView tvForgetPwd; @BindView(R.id.ll_content) LinearLayout llContent; @BindView(R.id.et_email) EditText etEmail; @BindView(R.id.btn_back) Button btnBack; @BindView(R.id.container) RelativeLayout container; private Context context; @BindView(R.id.ll_register) LinearLayout llRegister; //接口回调传递参数 private OnClickListenerInterface mListener; private View view;// private String strContent; private int centerX; private int centerY; private int depthZ = 700;//修改此处可以改变距离来达到你满意的效果 private int duration = 300;//动画时间 private Rotate3dAnimation openAnimation; private Rotate3dAnimation closeAnimation; private boolean isOpen = false; public interface OnClickListenerInterface &#123; /** * 确认, */ void doConfirm(); /** * 取消 */// public void doCancel(); &#125; public MyDialog(Context context) &#123; super(context); this.context = context; &#125; public MyDialog(Context context, String content) &#123; super(context); this.context = context; this.strContent = content; &#125; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); //去掉系统的黑色矩形边框 getWindow().setBackgroundDrawableResource(android.R.color.transparent); requestWindowFeature(Window.FEATURE_NO_TITLE); init(); &#125; public void init() &#123; LayoutInflater inflater = LayoutInflater.from(context); view = inflater.inflate(R.layout.dialog_my, null); setContentView(view); ButterKnife.bind(this); etPassword.setTypeface(Typeface.DEFAULT); etPassword.setTransformationMethod(new PasswordTransformationMethod()); tvForgetPwd.setOnClickListener(new OnWidgetClickListener()); btnBack.setOnClickListener(new OnWidgetClickListener()); Window dialogWindow = getWindow(); WindowManager.LayoutParams lp = dialogWindow.getAttributes(); DisplayMetrics d = context.getResources().getDisplayMetrics(); // 获取屏幕宽、高用 lp.width = (int) (d.widthPixels * 0.8); // 宽度设置为屏幕的0.8 lp.height = (int) (d.heightPixels * 0.6); // 高度设置为屏幕的0.6 dialogWindow.setAttributes(lp); setCanceledOnTouchOutside(false); setCancelable(true); &#125; public void setClicklistener(OnClickListenerInterface clickListenerInterface) &#123; this.mListener = clickListenerInterface; &#125; private class OnWidgetClickListener implements View.OnClickListener &#123; @Override public void onClick(View v) &#123; int id = v.getId(); switch (id) &#123; case R.id.tv_forget_pwd: startAnimation(); break; case R.id.btn_back: startAnimation(); break; &#125; &#125; &#125; private void startAnimation() &#123; //接口回调传递参数 centerX = container.getWidth() / 2; centerY = container.getHeight() / 2; if (openAnimation == null) &#123; initOpenAnim(); initCloseAnim(); &#125; //用作判断当前点击事件发生时动画是否正在执行 if (openAnimation.hasStarted() &amp;&amp; !openAnimation.hasEnded()) &#123; return; &#125; if (closeAnimation.hasStarted() &amp;&amp; !closeAnimation.hasEnded()) &#123; return; &#125; //判断动画执行 if (isOpen) &#123; container.startAnimation(openAnimation); &#125; else &#123; container.startAnimation(closeAnimation); &#125; isOpen = !isOpen; &#125; /** *注意旋转角度 */ private void initOpenAnim() &#123; //从0到90度，顺时针旋转视图，此时reverse参数为true，达到90度时动画结束时视图变得不可见， openAnimation = new Rotate3dAnimation(0, 90, centerX, centerY, depthZ, true); openAnimation.setDuration(duration); openAnimation.setFillAfter(true); openAnimation.setInterpolator(new AccelerateInterpolator()); openAnimation.setAnimationListener(new Animation.AnimationListener() &#123; @Override public void onAnimationStart(Animation animation) &#123; &#125; @Override public void onAnimationRepeat(Animation animation) &#123; &#125; @Override public void onAnimationEnd(Animation animation) &#123; llRegister.setVisibility(View.GONE); llContent.setVisibility(View.VISIBLE); //从270到360度，顺时针旋转视图，此时reverse参数为false，达到360度动画结束时视图变得可见 Rotate3dAnimation rotateAnimation = new Rotate3dAnimation(270, 360, centerX, centerY, depthZ, false); rotateAnimation.setDuration(duration); rotateAnimation.setFillAfter(true); rotateAnimation.setInterpolator(new DecelerateInterpolator()); container.startAnimation(rotateAnimation); &#125; &#125;); &#125; private void initCloseAnim() &#123; closeAnimation = new Rotate3dAnimation(360, 270, centerX, centerY, depthZ, true); closeAnimation.setDuration(duration); closeAnimation.setFillAfter(true); closeAnimation.setInterpolator(new AccelerateInterpolator()); closeAnimation.setAnimationListener(new Animation.AnimationListener() &#123; @Override public void onAnimationStart(Animation animation) &#123; &#125; @Override public void onAnimationRepeat(Animation animation) &#123; &#125; @Override public void onAnimationEnd(Animation animation) &#123; llRegister.setVisibility(View.VISIBLE); llContent.setVisibility(View.GONE); Rotate3dAnimation rotateAnimation = new Rotate3dAnimation(90, 0, centerX, centerY, depthZ, false); rotateAnimation.setDuration(duration); rotateAnimation.setFillAfter(true); rotateAnimation.setInterpolator(new DecelerateInterpolator()); container.startAnimation(rotateAnimation); &#125; &#125;); &#125;&#125; 关于Flip效果的实现可以参考文章Card Flip Animations的实现， 源码中也有Flip效果的实现 Demo下载 说明：上传的Demo全部为免积分，现在CSDN设置最低收了一积分，没办法了。没有积分的可以在github上下载 githHub下载","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"验证++i和i++的区别","slug":"验证-i和i-的区别","date":"2017-07-03T14:10:56.000Z","updated":"2018-07-10T05:52:33.826Z","comments":true,"path":"2017/07/03/验证-i和i-的区别/","link":"","permalink":"https://student9128.github.io/2017/07/03/验证-i和i-的区别/","excerpt":"","text":"平时我们对k=++i和k=i++的区别解释一般记忆： ++i就是i先自身加1再赋值给k; i++就是先将i赋值给k，i在自身加1; 这样的解释最终都是说将i赋值给了k。 这里通过写几个方法来证明，这个说法并不对。当然这样记忆可能更为方便些。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * 分析++i和i++的区别. * @author J.Kevin *平时我们对k=++i和k=i++的区别解释一般记忆： *&lt;br/&gt;++i就是i先自身加1再赋值给k; *&lt;br/&gt;i++就是先将i赋值给k，i在自身加1; *&lt;p/&gt;这样的解释最终都是说将i赋值给了k。 *&lt;p/&gt;这里通过几个方法来证明，这个说法并不对。当然这样记忆可能更为方便些。 */public class Test &#123; public static void main(String[] args) &#123; test1(); test2(); test3(); test4(); test5(); test6(); &#125; public static void test1() &#123; int i = 10; int k = ++i; System.out.println(&quot;k=++i结果：\\t&quot; + k); &#125; public static void test2() &#123; int i = 10; int k = i++; System.out.println(&quot;k=i++结果：\\t&quot; + k); &#125; public static void test3() &#123; int i = 10; int k = (++i); System.out.println(&quot;k=(++i)结果：\\t&quot; + k); &#125; public static void test4() &#123; int i = 10; int k = (i++); System.out.println(&quot;k=(i++)结果：\\t&quot; + k); &#125; public static void test5() &#123; int i = 10; System.out.println(&quot;(++i)结果：\\t&quot; + (++i)); &#125; public static void test6() &#123; int i = 10; System.out.println(&quot;(i++)结果：\\t&quot; + (i++)); &#125;&#125; 可以看到，一共写了6个方法，目的只是为了证明一件事，那就是k=++i和k=i++并不是将i值赋值给了k，而是将++i和i++这个表达式赋值个了k。如何证明? 看下我的打印结果： 123456k=++i结果： 11k=i++结果： 10k=(++i)结果： 11k=(i++)结果： 10(++i)结果： 11(i++)结果： 10 为了防止不好理解，这里特意为++i和i++添加了括号，意在证明结果就是(++i)和(i++)这个表达式的值。 相信有很多人已经知道是这样的，这里只是记录下，也方便没有理解的童鞋学习｡◕ᴗ◕｡","categories":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/tags/Java/"}]},{"title":"Android Studio中的字体设置","slug":"Android-Studio中的字体设置","date":"2017-06-29T07:26:40.000Z","updated":"2018-07-10T05:55:19.842Z","comments":true,"path":"2017/06/29/Android-Studio中的字体设置/","link":"","permalink":"https://student9128.github.io/2017/06/29/Android-Studio中的字体设置/","excerpt":"","text":"Android Studio使用中，设置最多的就是code区域的字体大小，另外再就是console的字体大小设置。但是我想设置侧边栏的怎么办？我想设置标题栏的怎么办呢？ 编码区域字体大小： Console区域字体大小 侧标栏及标题栏，其实就是Android Studio工具整体的字体大小 Presentation Mode字体大小 注：什么是Presentation Mode？点击View-Enter Presentation Mode即可体验下面是效果图","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"简单了解MVP","slug":"简单了解MVP","date":"2017-06-28T11:25:48.000Z","updated":"2018-07-10T05:56:50.685Z","comments":true,"path":"2017/06/28/简单了解MVP/","link":"","permalink":"https://student9128.github.io/2017/06/28/简单了解MVP/","excerpt":"","text":"当下Android开发使用MVP,MVVM使用的非常多，很多网站博客论坛都通过图文详细讲解了各种优缺点。然而感觉图画的再好感觉没有卵用。还是看代码来的直接。然而发现各家代码写的有些不同，有好几个模板，其实大体都是相同的。都知道Google出了自己家的目标。这里就简单记录下google家的模板代码写的一个界面。 效果图 最平淡无奇的登录界面。很多文章都有。 代码代码结构 废话不多说，直接上代码吧。个人感觉文章写的再牛，都不如看过代码自己体验的好。所以只贴代码，不多说。 MainActivity.java就是一个容器123456789101112131415161718192021public class MainActivity extends AppCompatActivity &#123; @BindView(R.id.fl_content) FrameLayout flContent; private MainPresenter mainPresenter; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); MainFragment mainFragment = (MainFragment) getSupportFragmentManager().findFragmentById(R.id.fl_content); if (mainFragment == null) &#123; mainFragment = MainFragment.newInstance(); ActivityUtils.addFragmentToActivity(getSupportFragmentManager(), mainFragment, R.id.fl_content); &#125; mainPresenter = new MainPresenter(this,mainFragment); mainFragment.setPresenter(mainPresenter); &#125;&#125; MainFragment.java处理view 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class MainFragment extends Fragment implements MainContract.View &#123; @BindView(R.id.tiet_user_name) TextInputEditText tietUserName; @BindView(R.id.tiet_password) TextInputEditText tietPassword; @BindView(R.id.btn_login) Button btnLogin; @BindView(R.id.pb_progress_bar) ProgressBar pbProgressBar; Unbinder unbinder; private MainContract.Presenter mPresenter; public static MainFragment newInstance() &#123; MainFragment fragment = new MainFragment(); return fragment; &#125; @Override public void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); mPresenter = new MainPresenter(getActivity(), this); &#125; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.fragment_main, container, false); unbinder = ButterKnife.bind(this, view); return view; &#125; @OnClick(R.id.btn_login) public void login() &#123; showProgressBar(); mPresenter.login(); &#125; @Override public void onDestroyView() &#123; super.onDestroyView(); unbinder.unbind(); &#125; @Override public void showProgressBar() &#123; pbProgressBar.setVisibility(View.VISIBLE); &#125; @Override public void hideProgressBar() &#123; pbProgressBar.setVisibility(View.GONE); &#125; @Override public String getUserName() &#123; return tietUserName.getText().toString().trim(); &#125; @Override public String getPassword() &#123; return tietPassword.getText().toString().trim(); &#125; @Override public void setPresenter(MainContract.Presenter presenter) &#123; mPresenter = presenter; &#125;&#125; MainContract .java定义接口通过接口来处理view,presenter 1234567891011121314151617public interface MainContract &#123; interface View extends BaseView&lt;Presenter&gt; &#123; void showProgressBar(); void hideProgressBar(); String getUserName(); String getPassword(); &#125; interface Presenter extends BasePresenter &#123; void login(); &#125;&#125; MainPresenter .java处理逻辑 12345678910111213141516171819202122public class MainPresenter implements MainContract.Presenter &#123; private Context context; private MainContract.View mView; public MainPresenter(Context context, MainContract.View view) &#123; this.context = context; mView = view; &#125; @Override public void login() &#123; if (&quot;user&quot;.equals(mView.getUserName()) &amp;&amp; &quot;123&quot;.equals(mView.getPassword())) &#123; ToastUtils.showToast(context, &quot;Login Successfully!&quot;); mView.hideProgressBar(); &#125; else &#123; ToastUtils.showToast(context, &quot;Sorry,you failed!&quot;); mView.hideProgressBar(); &#125; &#125;&#125; Demo下载","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"MVP","slug":"MVP","permalink":"https://student9128.github.io/tags/MVP/"}]},{"title":"自定义快速滚动条FastScrollBar","slug":"自定义快速滚动条FastScrollBar","date":"2017-06-26T15:01:20.000Z","updated":"2018-07-10T05:58:27.297Z","comments":true,"path":"2017/06/26/自定义快速滚动条FastScrollBar/","link":"","permalink":"https://student9128.github.io/2017/06/26/自定义快速滚动条FastScrollBar/","excerpt":"","text":"通常情况下，在使用ScrollView,ListView的时候都会取消scrollbar，然而当数据量特别大的时候，滑动可能又比较费劲。这时候就会需要一个滚动条来帮助我们。使用时也进行了搜索，这里也简单记录下自定义的滚动条。以便后续使用 效果图 代码 需要在布局文件或者代码中为ListView或者ScrollView添加android:fastScrollEnabled=”true”或者mListView.setFastScrollEnabled(true); 123456&lt;ListView android:id=&quot;@+id/lv_list_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_marginTop=&quot;20dp&quot; android:fastScrollEnabled=&quot;true&quot;&gt;&lt;/ListView&gt; 添加完这一行代码后就有快速滚动条了。当然有很多人会感觉自带效果不好看，或者需要自定义样式 在styles.xml里自定义一个主题。添加到所在Activity即可 1234&lt;style name=&quot;FastScrollTheme&quot; parent=&quot;AppTheme&quot;&gt; &lt;item name=&quot;android:fastScrollThumbDrawable&quot;&gt;@drawable/bg_fast_scroll_bar_thumb&lt;/item&gt; &lt;item name=&quot;android:fastScrollTrackDrawable&quot;&gt;@drawable/bg_fast_scroll_bar_track&lt;/item&gt; &lt;/style&gt; AndroidMainfest.xml中 12345678&lt;activity android:name=&quot;.MainActivity&quot; android:theme=&quot;@style/FastScrollTheme&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; 自定义的样式 12345678910111213141516171819202122//bg_fast_scroll_bar_thumb 指的是短条&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt; &lt;solid android:color=&quot;@color/red&quot; /&gt; &lt;size android:width=&quot;15dp&quot; android:height=&quot;30dp&quot; /&gt;&lt;/shape&gt;//bg_fast_scroll_bar_track 指的是长条&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt; &lt;solid android:color=&quot;@color/transparent&quot; /&gt; &lt;size android:width=&quot;5dp&quot; android:height=&quot;10dp&quot; /&gt;&lt;/shape&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"TextView首行缩进","slug":"TextView首行缩进","date":"2017-06-26T14:47:55.000Z","updated":"2018-07-10T06:00:18.829Z","comments":true,"path":"2017/06/26/TextView首行缩进/","link":"","permalink":"https://student9128.github.io/2017/06/26/TextView首行缩进/","excerpt":"","text":"在开发过程中，有时候会通过TextView展示大量的文字，这时候可能会需要在首行缩进。下面就是简单记录下两种方式，方便以后使用。 效果图 实现代码123456789//第一种方式 mTvText.setText(&quot;\\u3000\\u3000&quot; + &quot;TextView首行缩进实现、TextView首行缩进实现、TextView首行&quot; + &quot;缩进实现、TextView首行缩进实现、TextView首行缩进实现、TextView首行缩进实现、TextView首行缩进实现&quot;); //第二种方式 SpannableStringBuilder span = new SpannableStringBuilder(&quot;缩进&quot; + &quot;TextView首行缩进实现第二种&quot; + &quot;方式-TextView首行缩进实现第二种方式-TextView首行缩进实现第二种方式&quot;); span.setSpan(new ForegroundColorSpan(Color.TRANSPARENT), 0, 2, Spanned.SPAN_INCLUSIVE_EXCLUSIVE); mTvText2.setText(span);","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"分享一个第三方ViewPager库","slug":"分享一个第三方ViewPager库","date":"2017-05-31T14:04:43.000Z","updated":"2018-07-10T06:01:36.544Z","comments":true,"path":"2017/05/31/分享一个第三方ViewPager库/","link":"","permalink":"https://student9128.github.io/2017/05/31/分享一个第三方ViewPager库/","excerpt":"","text":"前一段看到一个第三方ViewPager库，阿里巴巴的UltraViewPager,相信很多人都知道，也可能有些人不知道。在这里分享一下 效果图 这个是自己练习，搞了两种效果 这个是其中一个官方给的效果 表示确实很好用，几种常用的效果也都有了，很多发愁怎么搞这些效果的同学可以直接集成了。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class MainActivity extends AppCompatActivity &#123; private UltraViewPager mUltraViewPager, mUltraViewPager2; private int[] imageArr = new int[]&#123;R.drawable.ic_image01, R.drawable.ic_image02, R.drawable.ic_image03&#125;; private int[] imageArr2 = new int[]&#123;R.drawable.ic_image04, R.drawable.ic_image05, R.drawable.ic_image06&#125;; private UltraPagerAdapter mAdapter; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mUltraViewPager = (UltraViewPager) findViewById(R.id.ultra_view_pager); mUltraViewPager.setScrollMode(UltraViewPager.ScrollMode.HORIZONTAL); mAdapter = new UltraPagerAdapter(imageArr); mUltraViewPager.setAdapter(mAdapter);// mUltraViewPager.setItemRatio(1.0f); //内置indicator初始化 mUltraViewPager.setMultiScreen(0.8f); mUltraViewPager.initIndicator();//设置indicator样式 mUltraViewPager.getIndicator() .setOrientation(UltraViewPager.Orientation.HORIZONTAL) .setFocusColor(Color.CYAN) .setNormalColor(Color.WHITE)// .setFocusColor(R.drawable.bg_shape_circle)// .setNormalColor(R.drawable.bg_shape_circle01) .setRadius((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics()));//设置indicator对齐方式 mUltraViewPager.getIndicator().setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM); mUltraViewPager.getIndicator().setMargin(0, 0, 0, 20);//构造indicator,绑定到UltraViewPager mUltraViewPager.getIndicator().build();//设定页面循环播放 mUltraViewPager.setInfiniteLoop(true);//设定页面自动切换 间隔2秒 mUltraViewPager.setAutoScroll(2000); mUltraViewPager2 = (UltraViewPager) findViewById(R.id.ultra_view_pager_2); mUltraViewPager2.setScrollMode(UltraViewPager.ScrollMode.VERTICAL); mAdapter = new UltraPagerAdapter(imageArr2); mUltraViewPager2.setAdapter(mAdapter);//设定页面循环播放 mUltraViewPager2.setInfiniteLoop(true);//设定页面自动切换 间隔2秒 mUltraViewPager2.setAutoScroll(2000); &#125;&#125; 具体使用，可以查看官方的地址：https://github.com/alibaba/UltraViewPager","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ViewPager","slug":"ViewPager","permalink":"https://student9128.github.io/tags/ViewPager/"}]},{"title":"讯飞语音集成","slug":"讯飞语音集成","date":"2017-05-30T12:01:48.000Z","updated":"2018-07-10T06:07:50.543Z","comments":true,"path":"2017/05/30/讯飞语音集成/","link":"","permalink":"https://student9128.github.io/2017/05/30/讯飞语音集成/","excerpt":"","text":"目前很多app都集成了语音搜索，语音输入等功能。科大讯飞的语音输入法比较厉害。这里就简单集成下科大讯飞的语音识别。 效果图 由于是集成第三方的，都是根据文档来的，不是很难。这里直接简单记录下，方便使用 当然，要想集成科大讯飞的语音功能，首先要去官方开放平台去注册账号，下载相关SDK，这个是必备的。 在开放平台创建新的应用 这样一步一步的进行，可以看到从官方下载的SDK里面doc文件夹里带有各种说明文档，按照文档来就行了。 代码废话不多说，直接上代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195package com.kevin.tech.voicetest;import android.os.Bundle;import android.os.Environment;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import com.iflytek.cloud.ErrorCode;import com.iflytek.cloud.InitListener;import com.iflytek.cloud.RecognizerResult;import com.iflytek.cloud.SpeechConstant;import com.iflytek.cloud.SpeechError;import com.iflytek.cloud.SpeechRecognizer;import com.iflytek.cloud.ui.RecognizerDialog;import com.iflytek.cloud.ui.RecognizerDialogListener;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.LinkedHashMap;public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123; // 语音听写对象 private SpeechRecognizer speechRecognizer; // 语音听写UI private RecognizerDialog recognizerDialog; // 用HashMap存储听写结果 private HashMap&lt;String, String&gt; mRecoginizerResult = new LinkedHashMap&lt;String, String&gt;(); private static String TAG = MainActivity.class.getSimpleName(); // 引擎类型 private String mEngineType = SpeechConstant.TYPE_CLOUD; private EditText mEtText; private Button mBtnBegin, mBtnCancel;// private SharedPreferences mSharedPreferences; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mEtText = (EditText) findViewById(R.id.tv_text); mBtnBegin = (Button) findViewById(R.id.btn_begin); mBtnCancel = (Button) findViewById(R.id.btn_cancel); mBtnBegin.setOnClickListener(this); mBtnCancel.setOnClickListener(this); // 初始化识别无UI识别对象 // 使用SpeechRecognizer对象，可根据回调消息自定义界面； speechRecognizer = SpeechRecognizer.createRecognizer(MainActivity.this, mInitListener); // 初始化听写Dialog，如果只使用有UI听写功能，无需创建SpeechRecognizer // 使用UI听写功能，请根据sdk文件目录下的notice.txt,放置布局文件和图片资源 recognizerDialog = new RecognizerDialog(MainActivity.this, mInitListener); &#125; /** * 初始化监听器。 */ private InitListener mInitListener = new InitListener() &#123; @Override public void onInit(int code) &#123; Log.d(TAG, &quot;SpeechRecognizer init() code = &quot; + code); if (code != ErrorCode.SUCCESS) &#123; showTip(&quot;初始化失败，错误码：&quot; + code); &#125; else &#123; showTip(&quot;初始化成功&quot;); &#125; &#125; &#125;; private void showTip(String msg) &#123; ToastUtils.showToast(MainActivity.this, msg); &#125; @Override public void onClick(View v) &#123; if (null == speechRecognizer) &#123; // 创建单例失败，与 21001 错误为同样原因，参考 http://bbs.xfyun.cn/forum.php?mod=viewthread&amp;tid=9688 this.showTip(&quot;创建对象失败，请确认 libmsc.so 放置正确，且有调用 createUtility 进行初始化&quot;); return; &#125; switch (v.getId()) &#123; case R.id.btn_begin: mEtText.setText(null);// 清空显示内容 mRecoginizerResult.clear(); // 设置参数 setParam(); recognizerDialog.setListener(mRecognizerDialogListener); recognizerDialog.show(); showTip(&quot;请开始说话...&quot;); break; case R.id.btn_cancel: speechRecognizer.cancel(); showTip(&quot;取消听写&quot;); break; &#125; &#125; /** * 参数设置 */ public void setParam() &#123; // 清空参数 speechRecognizer.setParameter(SpeechConstant.PARAMS, null); // 设置听写引擎 speechRecognizer.setParameter(SpeechConstant.ENGINE_TYPE, mEngineType); // 设置返回结果格式 speechRecognizer.setParameter(SpeechConstant.RESULT_TYPE, &quot;json&quot;);// String lag = mSharedPreferences.getString(&quot;iat_language_preference&quot;, &quot;mandarin&quot;); String lag = &quot;mandarin&quot;; if (lag.equals(&quot;en_us&quot;)) &#123; // 设置语言 speechRecognizer.setParameter(SpeechConstant.LANGUAGE, &quot;en_us&quot;); &#125; else &#123; // 设置语言 speechRecognizer.setParameter(SpeechConstant.LANGUAGE, &quot;zh_cn&quot;); // 设置语言区域 speechRecognizer.setParameter(SpeechConstant.ACCENT, lag); &#125; // 设置语音前端点:静音超时时间，即用户多长时间不说话则当做超时处理// speechRecognizer.setParameter(SpeechConstant.VAD_BOS, mSharedPreferences.getString(&quot;iat_vadbos_preference&quot;, &quot;4000&quot;)); speechRecognizer.setParameter(SpeechConstant.VAD_BOS, &quot;4000&quot;); // 设置语音后端点:后端点静音检测时间，即用户停止说话多长时间内即认为不再输入， 自动停止录音// speechRecognizer.setParameter(SpeechConstant.VAD_EOS, mSharedPreferences.getString(&quot;iat_vadeos_preference&quot;, &quot;1000&quot;)); speechRecognizer.setParameter(SpeechConstant.VAD_EOS, &quot;1000&quot;); // 设置标点符号,设置为&quot;0&quot;返回结果无标点,设置为&quot;1&quot;返回结果有标点// speechRecognizer.setParameter(SpeechConstant.ASR_PTT, mSharedPreferences.getString(&quot;iat_punc_preference&quot;, &quot;1&quot;)); speechRecognizer.setParameter(SpeechConstant.ASR_PTT, &quot;1&quot;); // 设置音频保存路径，保存音频格式支持pcm、wav，设置路径为sd卡请注意WRITE_EXTERNAL_STORAGE权限 // 注：AUDIO_FORMAT参数语记需要更新版本才能生效 speechRecognizer.setParameter(SpeechConstant.AUDIO_FORMAT, &quot;wav&quot;); speechRecognizer.setParameter(SpeechConstant.ASR_AUDIO_PATH, Environment.getExternalStorageDirectory() + &quot;/msc/iat.wav&quot;); &#125; /** * 听写UI监听器 */ private RecognizerDialogListener mRecognizerDialogListener = new RecognizerDialogListener() &#123; public void onResult(RecognizerResult results, boolean isLast) &#123; printResult(results); &#125; /** * 识别回调错误. */ public void onError(SpeechError error) &#123; showTip(error.getPlainDescription(true)); &#125; &#125;; private void printResult(RecognizerResult results) &#123; String text = JsonParser.parseIatResult(results.getResultString()); String sn = null; // 读取json结果中的sn字段 try &#123; JSONObject resultJson = new JSONObject(results.getResultString()); sn = resultJson.optString(&quot;sn&quot;); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; mRecoginizerResult.put(sn, text); StringBuffer resultBuffer = new StringBuffer(); for (String key : mRecoginizerResult.keySet()) &#123; resultBuffer.append(mRecoginizerResult.get(key)); &#125; mEtText.setText(resultBuffer.toString()); mEtText.setSelection(mEtText.length()); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); if (null != speechRecognizer) &#123; // 退出时释放连接 speechRecognizer.cancel(); speechRecognizer.destroy(); &#125; &#125;&#125; Demo下载","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"语音","slug":"语音","permalink":"https://student9128.github.io/tags/语音/"}]},{"title":"Android中比较日期的大小","slug":"Android中比较日期的大小","date":"2017-03-31T12:45:11.000Z","updated":"2018-07-10T06:03:50.036Z","comments":true,"path":"2017/03/31/Android中比较日期的大小/","link":"","permalink":"https://student9128.github.io/2017/03/31/Android中比较日期的大小/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162** * Created by Kevin on 2017/3/10. * &lt;br/&gt; * Blog:http://blog.csdn.net/student9128 * &lt;p/&gt; * Description: 与日期相关的工具类 */public class DateUtils &#123; /** * 比较两个日期的大小，日期格式为yyyy-MM-dd * * @param str1 the first date * @param str2 the second date * @return true &lt;br/&gt;false */ public static boolean isDateOneBigger(String str1, String str2) &#123; boolean isBigger = false; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); Date dt1 = null; Date dt2 = null; try &#123; dt1 = sdf.parse(str1); dt2 = sdf.parse(str2); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; if (dt1.getTime() &gt; dt2.getTime()) &#123; isBigger = true; &#125; else if (dt1.getTime() &lt; dt2.getTime()) &#123; isBigger = false; &#125; return isBigger; &#125; /** * 比较两个日期的大小，日期格式为yyyy-MM-dd * * @param str1 the first date * @param str2 the second date * @return true &lt;br/&gt;false */ public static boolean isDate2Bigger(String str1, String str2) &#123; boolean isBigger = false; SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); Date dt1 = null; Date dt2 = null; try &#123; dt1 = sdf.parse(str1); dt2 = sdf.parse(str2); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; if (dt1.getTime() &gt; dt2.getTime()) &#123; isBigger = false; &#125; else if (dt1.getTime() &lt;= dt2.getTime()) &#123; isBigger = true; &#125; return isBigger; &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"SwitchCompat与Switch简单使用","slug":"SwitchCompat与Switch简单使用","date":"2017-02-28T13:38:53.000Z","updated":"2018-07-10T06:13:15.077Z","comments":true,"path":"2017/02/28/SwitchCompat与Switch简单使用/","link":"","permalink":"https://student9128.github.io/2017/02/28/SwitchCompat与Switch简单使用/","excerpt":"","text":"目前很多App用的开关都是仿ios的，因为很多Android开发人员都别要求仿ios,表示有点悲哀，Android应该就自己的风格，而且原生的也很好用。 效果图 可以看到这里面又三个开关前两个是SwithCompat,绿色的是Switch.话不多说，直接看代码 代码 布局 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_switch1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;25dp&quot; android:text=&quot;开启夜间模式&quot; android:textSize=&quot;16sp&quot;/&gt; &lt;android.support.v7.widget.SwitchCompat android:id=&quot;@+id/sc_switch_compat&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_marginRight=&quot;25dp&quot; android:longClickable=&quot;false&quot; android:textColor=&quot;@color/white&quot; android:textOff=&quot;Off&quot; android:textOn=&quot;On&quot; app:showText=&quot;true&quot; app:switchPadding=&quot;5dp&quot; app:switchTextAppearance=&quot;@style/SwitchCompat.Text&quot; app:theme=&quot;@style/SwitchCompat.Control&quot;/&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;30dp&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_switch2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;25dp&quot; android:text=&quot;开启夜间模式&quot; android:textSize=&quot;16sp&quot;/&gt; &lt;android.support.v7.widget.SwitchCompat android:id=&quot;@+id/sc_switch_compat2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;46dp&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_marginRight=&quot;25dp&quot; android:checked=&quot;false&quot; android:longClickable=&quot;false&quot;/&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;30dp&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_switch3&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;25dp&quot; android:text=&quot;开启夜间模式&quot; android:textSize=&quot;16sp&quot;/&gt; &lt;Switch android:id=&quot;@+id/s_switch&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;46dp&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_marginRight=&quot;25dp&quot; android:checked=&quot;false&quot; android:longClickable=&quot;false&quot; android:textOff=&quot;OFF&quot; android:textOn=&quot;ON&quot; android:theme=&quot;@style/SwitchStyle&quot;/&gt; &lt;/RelativeLayout&gt; Style 123456789101112131415&lt;style name=&quot;SwitchCompat.Control&quot; parent=&quot;Theme.AppCompat.Light&quot;&gt; &lt;!-- active thumb &amp; track color (30% transparency) --&gt; &lt;item name=&quot;colorControlActivated&quot;&gt;@color/yellow&lt;/item&gt; &lt;item name=&quot;colorSwitchThumbNormal&quot;&gt;@color/red&lt;/item&gt; &lt;item name=&quot;android:colorForeground&quot;&gt;@color/red_500&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;SwitchCompat.Text&quot; parent=&quot;Theme.AppCompat.Light&quot;&gt; &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt; &lt;item name=&quot;android:textSize&quot;&gt;9dp&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;SwitchStyle&quot; parent=&quot;AppTheme&quot;&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/green&lt;/item&gt; &lt;/style&gt; 代码 1234567891011121314151617181920212223242526272829303132 mSwitchCompat = (SwitchCompat) findViewById(R.id.sc_switch_compat); mSwitchCompat.setChecked(false); mSwitchCompat.setOnCheckedChangeListener(this); mSwitchCompat2 = (SwitchCompat) findViewById(R.id.sc_switch_compat2); mSwitchCompat2.setChecked(false); mSwitchCompat2.setOnCheckedChangeListener(this); mSwitch2 = (Switch) findViewById(R.id.s_switch); mSwitch2.setChecked(false); mSwitch2.setOnCheckedChangeListener(this); @Override public void onCheckedChanged(CompoundButton button, boolean checked) &#123; if (checked) &#123; // 做我们要实现的一些操作 mDayNightHelper.setMode(DayNight.NIGHT); setTheme(R.style.NightTheme); switchMode(); mText.setText(&quot;Night&quot;); mSwitchCompat.setChecked(true); mSwitchCompat2.setChecked(true); mSwitch2.setChecked(true); &#125; else &#123; mDayNightHelper.setMode(DayNight.DAY); setTheme(R.style.DayTheme); switchMode(); mText.setText(&quot;Day&quot;); mSwitchCompat.setChecked(false); mSwitchCompat2.setChecked(false); mSwitch2.setChecked(false); &#125; &#125; 说明 可以看到，除了在Xml里面设置属性，Google还提供了这些方法进行设置，这里就不在写了，跟Xml的效果一样。 夜间模式的实现，可以参考文章《夜间模式的实现》","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"全屏跳转到非全屏Activity的问题","slug":"全屏跳转到非全屏Activity的问题","date":"2017-02-28T05:04:27.000Z","updated":"2018-07-10T06:14:35.184Z","comments":true,"path":"2017/02/28/全屏跳转到非全屏Activity的问题/","link":"","permalink":"https://student9128.github.io/2017/02/28/全屏跳转到非全屏Activity的问题/","excerpt":"","text":"一直以来，绝大多数APP都会有一个全屏的闪屏页面，若干秒之后跳转到非全屏界面。然而最近发现一个问题，很多app也一直存在，只是从来没在意看过，就没发现。 效果图 可以看到第二个界面发生了状态栏抖动的情况。其实不在意，有时候真的看不出来什么。但是既然发现了就要解决。 刚开始也没什么好的方法，首先想到的就是网上搜索。看了很多方案，确也没有一个完美的方法。 全屏界面是刚进入的时候设置了全屏，没了状态栏，进入非全屏，状态栏肯定要显示，于是乎就发生了抖动的现象，这里采用的就是跳转之前退出全屏，这就才能保证状态栏不抖动。 效果图2 在仔细看状态栏，是不是发生了变化。 说明：这种方案虽然算不上完美，但较其他的方法来比较，也不失为一种好的解决方法吧。 如果谁有更好的方案，欢迎说一下，学习学习。 相关代码 全屏12getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); 非全屏 12345678910@Overridepublic void onClick(View view) &#123; switch (view.getId()) &#123; case R.id.btn: getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN, WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN); startActivity(new Intent(MainActivity.this, Seond.class)); break; &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"JS变量命名规范","slug":"JS变量命名规范","date":"2017-01-10T08:48:06.000Z","updated":"2018-07-10T06:18:13.164Z","comments":true,"path":"2017/01/10/JS变量命名规范/","link":"","permalink":"https://student9128.github.io/2017/01/10/JS变量命名规范/","excerpt":"","text":"1、必须以字母、下划线或美元符号开头，后面可以跟字母、下划线、美元符号和数字。如下: 正确: hello _hello $hello 错误: 6hello //开头不能用数字 %hello //开头不能用除(_ $)外特殊符号,如(% + /等) hello+js //开头中间不能使用除(_ $)外特殊符号，如(% + /等) 2、变量中区分大小写，如A与a是两个不同的变量名。 3、不允许使用JavaScript关键了和保留字作变量名。 关键字 break case catch default delete do else finally for if in instance of new return switch throw try type of var void while 保留字 abstract boolean byte char class const debugger enum export extends final float goto implements int interface long native package private protected short static super synchronized throws transient volatile","categories":[{"name":"前端","slug":"前端","permalink":"https://student9128.github.io/categories/前端/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://student9128.github.io/tags/javascript/"}]},{"title":"Android版本名称、版本号、API level对应关系","slug":"Android版本名称、版本号、API-level对应关系","date":"2017-01-01T13:06:23.000Z","updated":"2018-07-10T06:20:10.656Z","comments":true,"path":"2017/01/01/Android版本名称、版本号、API-level对应关系/","link":"","permalink":"https://student9128.github.io/2017/01/01/Android版本名称、版本号、API-level对应关系/","excerpt":"","text":"Android版本名称、版本号、API level对应关系 Code name Version API level 1 no code name 1.0 API level 1 2 no code name 1.1 API level 2 3 Cupcake 1.5 API level 3,NDK 1 4 Donut 1.6 API level 4,NDK 2 5 Eclair 2.0 API level 5 6 Eclair 2.0.1 API level 6 7 Eclair 2.1 API level 7,NDK3 8 Froyo 2.2.x API level 8,NDK 4 9 Gingerbread 2.3-2.3.2 API level 9,NDK5 10 Gingerbread 2.3.3-2.3.7 API level 10 11 Honeycomb 3.0 API level 11 12 Honeycomb 3.1 API level 12,NDK 6 13 Honeycomb 3.2x API level 13 14 Ice Cream Sandwich 4.0.1-4.0.2 API level 14,NDK 7 15 Ice Cream Sandwich 4.0.3-4.0.4 API level 15,NDK 8 16 Jelly Bean 4.1x API level 16 17 Jelly Bean 4.2x API level 17 18 Jelly Bean 4.3x API level 18 19 KitKat 4.4-4.4.4 API level 19 20 Lollipop 5.0 API level 21 21 Lollipop 5.1 API level 22 22 Marshmallow 6.0 API level 23 23 Nougat 7.0 API level 24 24 Nougat 7.1.1 API level 25","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Android开发中dp,sp和px之间的转换","slug":"Android开发中dp-sp和px之间的转换","date":"2016-12-29T13:56:05.000Z","updated":"2018-07-10T06:22:21.265Z","comments":true,"path":"2016/12/29/Android开发中dp-sp和px之间的转换/","link":"","permalink":"https://student9128.github.io/2016/12/29/Android开发中dp-sp和px之间的转换/","excerpt":"","text":"众所周知，在Android开发中dp和px,sp和px之间的转换时必不可少的，下面将转换的代码记录下来： 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class DisplayUtils &#123; /** * convert px to its equivalent dp * * 将px转换为与之相等的dp */ public static int px2dp(Context context, float pxValue) &#123; final float scale = context.getResources().getDisplayMetrics().density; return (int) (pxValue / scale + 0.5f); &#125; /** * convert dp to its equivalent px * * 将dp转换为与之相等的px */ public static int dp2px(Context context, float dipValue) &#123; final float scale = context.getResources().getDisplayMetrics().density; return (int) (dipValue * scale + 0.5f); &#125; /** * convert px to its equivalent sp * * 将px转换为sp */ public static int px2sp(Context context, float pxValue) &#123; final float fontScale = context.getResources().getDisplayMetrics().scaledDensity; return (int) (pxValue / fontScale + 0.5f); &#125; /** * convert sp to its equivalent px * * 将sp转换为px */ public static int sp2px(Context context, float spValue) &#123; final float fontScale = context.getResources().getDisplayMetrics().scaledDensity; return (int) (spValue * fontScale + 0.5f); &#125;&#125; 同时系统也提供了TypedValue类帮助我们转换1234567891011121314/*** convert dp to its equivalent px*/protected int dp2px(int dp)&#123; return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,getResources().getDisplayMetrics()); &#125; /*** convert sp to its equivalent px*/protected int sp2px(int sp)&#123; return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp,getResources().getDisplayMetrics()); &#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Error:SSL peer shut down incorrectly的解决方案","slug":"Error-SSL-peer-shut-down-incorrectly的解决方案","date":"2016-12-22T15:28:31.000Z","updated":"2018-07-10T06:24:00.630Z","comments":true,"path":"2016/12/22/Error-SSL-peer-shut-down-incorrectly的解决方案/","link":"","permalink":"https://student9128.github.io/2016/12/22/Error-SSL-peer-shut-down-incorrectly的解决方案/","excerpt":"","text":"这两天重装了系统，由于是清空了所有的东西，把Android Studio也清理了。所以要重新安装Android Studio， 安装完后打开之前的代码发现报了标题上的错。这里记录下解决方案。 报错截图如下： 首先说下peer,有道了下(之前见过这个单词，忘了)，意思如下： 感觉没啥用，百度了下，说由于国内的原因，Gradle无法下载，瞬间明白，其实不是这个原因，我的Android Studio版本是2.0，之前用的2.2.2所以对应的版本号不同。 2.0 Android Studio： 2.2.2 Android Studio: 这才是真正原因，将2.2.2 版本的Gradle version和Android Plugin Version分别改为2.0版本的即可解决。 如果你碰到这样的报错信息，看看是不是和我的一样的问题。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-12-18T16:00:00.000Z","updated":"2018-07-06T15:58:14.307Z","comments":true,"path":"2016/12/19/hello-world/","link":"","permalink":"https://student9128.github.io/2016/12/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/categories/Test/"}],"tags":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/tags/Test/"}]},{"title":"Android底部导航栏实现（四）之TabLayout+ViewPager","slug":"Android底部导航栏实现（四）之TabLayout-ViewPager","date":"2016-12-05T04:12:59.000Z","updated":"2018-07-10T06:31:17.627Z","comments":true,"path":"2016/12/05/Android底部导航栏实现（四）之TabLayout-ViewPager/","link":"","permalink":"https://student9128.github.io/2016/12/05/Android底部导航栏实现（四）之TabLayout-ViewPager/","excerpt":"","text":"这里简单记录一下通过TabLayout+ViewPager来实现Android底部导航栏。 布局1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;include layout=&quot;@layout/fragment_content&quot;/&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot;&gt;&lt;/android.support.v4.view.ViewPager&gt; &lt;android.support.design.widget.TabLayout android:id=&quot;@+id/tab_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;56dp&quot; app:tabBackground=&quot;@color/white&quot; app:tabIndicatorHeight=&quot;0dp&quot; app:tabSelectedTextColor=&quot;@color/colorPrimary&quot; app:tabTextAppearance=&quot;@style/tabTextSizeStyle&quot; app:tabTextColor=&quot;@color/black_1&quot;&gt;&lt;/android.support.design.widget.TabLayout&gt; &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt; 代码123456789101112mViewPager = (ViewPager) view.findViewById(R.id.view_pager); mTabLayout = (TabLayout) view.findViewById(R.id.tab_layout); initTabList(); mAdapter = new TabLayoutFragmentAdapter(getChildFragmentManager(), mTabList, getActivity(), mFragments, mTabImgs); mViewPager.setAdapter(mAdapter); mViewPager.setCurrentItem(0); mTabLayout.setupWithViewPager(mViewPager); mTabLayout.setTabMode(TabLayout.MODE_FIXED);//设置TabLayout的模式 for (int i = 0; i &lt; mTabLayout.getTabCount(); i++) &#123; mTabLayout.getTabAt(i).setCustomView(mAdapter.getTabView(i)); &#125; mTabLayout.addOnTabSelectedListener(this);//设置TabLayout的选中监听 这里需要注意的就是TabLayout的使用。TabLayou配合ViewPager使用。要用 mTabLayout.setupWithViewPager(mViewPager);使二者联系起来。另外这里面使用的是customView，当然TabLayout自带方法也可实现icon+text的效果。也就是效果：TabLayout + ViewPager 2 根据Tab选中状态显示Tab键效果12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 @Override public void onTabSelected(TabLayout.Tab tab) &#123; setTabSelectedState(tab); &#125; @Override public void onTabUnselected(TabLayout.Tab tab) &#123; setTabUnSelectedState(tab); &#125; @Override public void onTabReselected(TabLayout.Tab tab) &#123; &#125;private void setTabSelectedState(TabLayout.Tab tab) &#123; View customView = tab.getCustomView(); TextView tabText = (TextView) customView.findViewById(R.id.tv_tab_text); ImageView tabIcon = (ImageView) customView.findViewById(R.id.iv_tab_icon); tabText.setTextColor(ContextCompat.getColor(getActivity(), R.color.colorPrimary)); String s = tabText.getText().toString(); if (getString(R.string.item_home).equals(s)) &#123; tabIcon.setImageResource(R.drawable.home_fill); &#125; else if (getString(R.string.item_location).equals(s)) &#123; tabIcon.setImageResource(R.drawable.location_fill); &#125; else if (getString(R.string.item_like).equals(s)) &#123; tabIcon.setImageResource(R.drawable.like_fill); &#125; else if (getString(R.string.item_person).equals(s)) &#123; tabIcon.setImageResource(R.drawable.person_fill); &#125; &#125; private void setTabUnSelectedState(TabLayout.Tab tab) &#123; View customView = tab.getCustomView(); TextView tabText = (TextView) customView.findViewById(R.id.tv_tab_text); ImageView tabIcon = (ImageView) customView.findViewById(R.id.iv_tab_icon); tabText.setTextColor(ContextCompat.getColor(getActivity(), R.color.black_1)); String s = tabText.getText().toString(); if (getString(R.string.item_home).equals(s)) &#123; tabIcon.setImageResource(R.drawable.home); &#125; else if (getString(R.string.item_location).equals(s)) &#123; tabIcon.setImageResource(R.drawable.location); &#125; else if (getString(R.string.item_like).equals(s)) &#123; tabIcon.setImageResource(R.drawable.like); &#125; else if (getString(R.string.item_person).equals(s)) &#123; tabIcon.setImageResource(R.drawable.person); &#125; &#125; 这里面不用设置defaultFragment，TabLayout会默认显示第一个； 另外，这里也贴出使用TabLayout自带方法来实现效果代码 值得说的是，自带方法不能自定义icon和text的间距。用起来很方便，但是可能不是你要求的那个尺寸大小。我没有去深究这里面的源码。如果有人知道这个自带方法怎么改变的，也请告知一下。 1234567891011121314151617 mViewPager = (ViewPager) view.findViewById(R.id.view_pager); mTabLayout = (TabLayout) view.findViewById(R.id.tab_layout); initTabList(); mAdapter = new TabLayoutFragment2Adapter(getChildFragmentManager(), mTabList, getActivity(), mFragments, mTabImgs); mViewPager.setAdapter(mAdapter); mViewPager.setCurrentItem(0); mTabLayout.setupWithViewPager(mViewPager); mTabLayout.setTabMode(TabLayout.MODE_FIXED);// for (int i = 0; i &lt; mTabLayout.getTabCount(); i++) &#123;// mTabLayout.getTabAt(i).setCustomView(mAdapter.getTabView(i));// &#125; mTabLayout.addOnTabSelectedListener(this);// mViewPager.setCurrentItem(0); mTabLayout.getTabAt(0).setIcon(R.drawable.home_fill);//自有方法添加icon mTabLayout.getTabAt(1).setIcon(R.drawable.location); mTabLayout.getTabAt(2).setIcon(R.drawable.like); mTabLayout.getTabAt(3).setIcon(R.drawable.person); Tab切换123456789101112131415161718192021222324252627282930 @Override public void onTabSelected(TabLayout.Tab tab) &#123;// setTabSelectedState(tab);//这个也无需使用 resetTabIcon(); int position = tab.getPosition(); Log.e(&quot;Kevin&quot;, &quot;position---&gt;&quot; + position); switch (position) &#123; case 0: tab.setIcon(R.drawable.home_fill); break; case 1: tab.setIcon(R.drawable.location_fill); break; case 2: tab.setIcon(R.drawable.like_fill); break; case 3: tab.setIcon(R.drawable.person_fill); break; &#125; &#125;private void resetTabIcon() &#123; mTabLayout.getTabAt(0).setIcon(R.drawable.home); mTabLayout.getTabAt(1).setIcon(R.drawable.location); mTabLayout.getTabAt(2).setIcon(R.drawable.like); mTabLayout.getTabAt(3).setIcon(R.drawable.person); &#125; 说明：这几篇文章没有过多的文字叙述，因为这些东西也不是很难，而且都是常用的，相信很多人都了如指掌了，多说亦是废话，直接上代码看的反而更清楚。 DownLoad DemoDownLoad Demo(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"底部导航栏","slug":"底部导航栏","permalink":"https://student9128.github.io/tags/底部导航栏/"}]},{"title":"Android底部导航栏实现（三）之TextView+LinearLayout","slug":"Android底部导航栏实现（三）之TextView-LinearLayout","date":"2016-12-05T04:10:36.000Z","updated":"2018-07-10T06:30:43.829Z","comments":true,"path":"2016/12/05/Android底部导航栏实现（三）之TextView-LinearLayout/","link":"","permalink":"https://student9128.github.io/2016/12/05/Android底部导航栏实现（三）之TextView-LinearLayout/","excerpt":"","text":"这里简单记录下通过TextView+LinearLayout+Fragment来实现Android底部导航栏。 布局1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;!--fragment_text_tab.xml--&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;FrameLayout android:id=&quot;@+id/sub_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot;&gt; &lt;TextView android:id=&quot;@+id/activity_text_view&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerHorizontal=&quot;true&quot; android:text=&quot;@string/tips&quot; android:textColor=&quot;@color/colorPrimary&quot; android:textSize=&quot;18sp&quot; android:textStyle=&quot;bold|italic&quot;/&gt; &lt;/FrameLayout&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;1px&quot; android:background=&quot;@color/grey_300&quot;/&gt; &lt;include layout=&quot;@layout/tab_layout_for_bottom&quot;/&gt;&lt;/LinearLayout&gt;&lt;!--tab_layout_for_bottom--&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;56dp&quot; android:background=&quot;@color/white&quot; android:orientation=&quot;horizontal&quot; tools:showIn=&quot;@layout/fragment_text_tab&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_home&quot; style=&quot;@style/viewpager_navigation_bar_tab_style&quot; android:drawableTop=&quot;@drawable/home&quot; android:text=&quot;@string/item_home&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_location&quot; style=&quot;@style/viewpager_navigation_bar_tab_style&quot; android:drawableTop=&quot;@drawable/location&quot; android:text=&quot;@string/item_location&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_like&quot; style=&quot;@style/viewpager_navigation_bar_tab_style&quot; android:drawableTop=&quot;@drawable/like&quot; android:text=&quot;@string/item_like&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_person&quot; style=&quot;@style/viewpager_navigation_bar_tab_style&quot; android:drawableTop=&quot;@drawable/person&quot; android:text=&quot;@string/item_person&quot;/&gt;&lt;/LinearLayout&gt; 代码12345678910111213141516171819202122232425262728mTHome.setOnClickListener(this);mTLocation.setOnClickListener(this);mTLike.setOnClickListener(this);mTMe.setOnClickListener(this);setDefaultFragment();//设置默认显示Fragment @Override public void onClick(View view) &#123; resetTabState();//reset the tab state switch (view.getId()) &#123; case R.id.tv_home: setTabState(mTHome, R.drawable.home_fill, getColor(R.color.colorPrimary));//设置Tab状态 switchFrgment(0);//切换Fragment break; case R.id.tv_location: setTabState(mTLocation, R.drawable.location_fill, getColor(R.color.colorPrimary)); switchFrgment(1); break; case R.id.tv_like: setTabState(mTLike, R.drawable.like_fill, getColor(R.color.colorPrimary)); switchFrgment(2); break; case R.id.tv_person: setTabState(mTMe, R.drawable.person_fill, getColor(R.color.colorPrimary)); switchFrgment(3); break; &#125; &#125; Fragment的切换12345678910111213141516171819202122232425262728293031323334/** * switch the fragment accordting to id * @param i id */private void switchFrgment(int i) &#123; FragmentTransaction transaction = getChildFragmentManager().beginTransaction(); switch (i) &#123; case 0: if (mHomeFragment == null) &#123; mHomeFragment = mHomeFragment.newInstance(getString(R.string.item_home)); &#125; transaction.replace(R.id.sub_content, mHomeFragment); break; case 1: if (mLocationFragment == null) &#123; mLocationFragment = LocationFragment.newInstance(getString(R.string.item_location)); &#125; transaction.replace(R.id.sub_content, mLocationFragment); break; case 2: if (mLikeFragment == null) &#123; mLikeFragment = LikeFragment.newInstance(getString(R.string.item_like)); &#125; transaction.replace(R.id.sub_content, mLikeFragment); break; case 3: if (mPersonFragment == null) &#123; mPersonFragment = PersonFragment.newInstance(getString(R.string.item_person)); &#125; transaction.replace(R.id.sub_content, mPersonFragment); break; &#125; transaction.commit();&#125; 这里面值得注意的地方就是要用getChildFragmentManager()，否则会出现切换Fragment内容不显示的情况。 设置Tab状态123456789101112131415161718192021222324/** * set the tab state of bottom navigation bar * * @param textView the text to be shown * @param image the image * @param color the text color */private void setTabState(TextView textView, int image, int color) &#123; textView.setCompoundDrawablesRelativeWithIntrinsicBounds(0, image, 0, 0);//Call requires API level 17 textView.setTextColor(color);&#125;/** * revert the image color and text color to black */private void resetTabState() &#123; setTabState(mTHome, R.drawable.home, getColor(R.color.black_1)); setTabState(mTLocation, R.drawable.location, getColor(R.color.black_1)); setTabState(mTLike, R.drawable.like, getColor(R.color.black_1)); setTabState(mTMe, R.drawable.person, getColor(R.color.black_1));&#125; 说明：这几篇文章没有过多的文字叙述，因为这些东西也不是很难，而且都是常用的，相信很多人都了如指掌了，多说亦是废话，直接上代码看的反而更清楚。 DownLoad DemoDownLoad Demo(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"底部导航栏","slug":"底部导航栏","permalink":"https://student9128.github.io/tags/底部导航栏/"}]},{"title":"Android底部导航栏实现（二）之RadioGroup","slug":"Android底部导航栏实现（二）之RadioGroup","date":"2016-12-05T04:09:06.000Z","updated":"2018-07-10T06:33:27.492Z","comments":true,"path":"2016/12/05/Android底部导航栏实现（二）之RadioGroup/","link":"","permalink":"https://student9128.github.io/2016/12/05/Android底部导航栏实现（二）之RadioGroup/","excerpt":"","text":"这里简单记录一下Android底部导航栏通过RadioGroup+Fragment的实现。 布局：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;include layout=&quot;@layout/fragment_content&quot;/&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;1px&quot; android:background=&quot;@color/grey_300&quot; android:elevation=&quot;20dp&quot;/&gt; &lt;RadioGroup android:id=&quot;@+id/radio_group&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;56dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:background=&quot;@color/white&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;RadioButton android:id=&quot;@+id/rb_home&quot; style=&quot;@style/radiobutton_style&quot; android:checked=&quot;true&quot; android:drawableTop=&quot;@drawable/radiobutton_bg_home&quot; android:text=&quot;@string/item_home&quot; /&gt; &lt;RadioButton android:id=&quot;@+id/rb_location&quot; style=&quot;@style/radiobutton_style&quot; android:drawableTop=&quot;@drawable/radiobutton_bg_location&quot; android:text=&quot;@string/item_location&quot;/&gt; &lt;RadioButton android:id=&quot;@+id/rb_like&quot; style=&quot;@style/radiobutton_style&quot; android:drawableTop=&quot;@drawable/radiobutton_bg_like&quot; android:text=&quot;@string/item_like&quot;/&gt; &lt;RadioButton android:id=&quot;@+id/rb_me&quot; style=&quot;@style/radiobutton_style&quot; android:drawableTop=&quot;@drawable/radiobutton_bg_me&quot; android:text=&quot;@string/item_person&quot;/&gt; &lt;/RadioGroup&gt;&lt;/RelativeLayout&gt; 这里的drawableTop使用了状态选择器 1234&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@drawable/home_fill&quot; android:state_checked=&quot;true&quot;/&gt; &lt;item android:drawable=&quot;@drawable/home&quot;/&gt;&lt;/selector&gt; style123456789&lt;style name=&quot;radiobutton_style&quot;&gt; &lt;item name=&quot;android:layout_width&quot;&gt;0dp&lt;/item&gt; &lt;item name=&quot;android:padding&quot;&gt;3dp&lt;/item&gt; &lt;item name=&quot;android:layout_height&quot;&gt;match_parent&lt;/item&gt; &lt;item name=&quot;android:layout_weight&quot;&gt;1&lt;/item&gt; &lt;item name=&quot;android:button&quot;&gt;@null&lt;/item&gt;&lt;!--去除RadioButton默认带的圆点--&gt; &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt; &lt;item name=&quot;android:textSize&quot;&gt;12sp&lt;/item&gt; &lt;/style&gt; 代码初始化的代码就不记录了，都是一些findViewById,实现过程无非就是对RadioButton进行监听一下： 1234567891011121314151617181920212223242526272829303132333435mRadioGroup.setOnCheckedChangeListener(this); @Override public void onCheckedChanged(RadioGroup group, int checkId) &#123; FragmentTransaction transaction = getFragmentManager().beginTransaction(); switch (checkId) &#123; case R.id.rb_home: if (mHomeFragment == null) &#123; mHomeFragment = HomeFragment.newInstance(getString(R.string.item_home)); &#125; transaction.replace(R.id.sub_content, mHomeFragment); break; case R.id.rb_location: if (mLocationFragment == null) &#123; mLocationFragment = LocationFragment.newInstance(getString(R.string.item_location)); &#125; transaction.replace(R.id.sub_content, mLocationFragment); break; case R.id.rb_like: if (mLikeFragment == null) &#123; mLikeFragment = LikeFragment.newInstance(getString(R.string.item_like)); &#125; transaction.replace(R.id.sub_content, mLikeFragment); break; case R.id.rb_me: if (mPersonFragment == null) &#123; mPersonFragment = PersonFragment.newInstance(getString(R.string.item_person)); &#125; transaction.replace(R.id.sub_content, mPersonFragment); break; &#125; setTabState();//设置状态 transaction.commit(); &#125; 状态的设置123456789101112131415161718192021222324252627282930313233343536373839404142private void setTabState() &#123; setHomeState(); setLocationState(); setLikeState(); setMeState();&#125;/** * set tab home state */private void setHomeState() &#123; if (mRadioHome.isChecked()) &#123; mRadioHome.setTextColor(ContextCompat.getColor(getActivity(), R.color.colorPrimary)); &#125; else &#123; mRadioHome.setTextColor(ContextCompat.getColor(getActivity(), R.color.black)); &#125;&#125;private void setLocationState() &#123; if (mRadioLocation.isChecked()) &#123; mRadioLocation.setTextColor(ContextCompat.getColor(getActivity(), R.color.colorPrimary)); &#125; else &#123; mRadioLocation.setTextColor(ContextCompat.getColor(getActivity(), R.color.black)); &#125;&#125;private void setLikeState() &#123; if (mRadioLike.isChecked()) &#123; mRadioLike.setTextColor(ContextCompat.getColor(getActivity(), R.color.colorPrimary)); &#125; else &#123; mRadioLike.setTextColor(ContextCompat.getColor(getActivity(), R.color.black)); &#125;&#125;private void setMeState() &#123; if (mRadioMe.isChecked()) &#123; mRadioMe.setTextColor(ContextCompat.getColor(getActivity(), R.color.colorPrimary)); &#125; else &#123; mRadioMe.setTextColor(ContextCompat.getColor(getActivity(), R.color.black)); &#125;&#125; 这里需要注意的是， setDefaultFragment();我写在onCreateVew里面并没有生效。这里我写在了onStart()方法里了。12345@Override public void onStart() &#123; setDefaultFragment();//写在onCreateView里面，当页面跑到其他Fragment再回来就不会生效 super.onStart(); &#125; 说明：这几篇文章没有过多的文字叙述，因为这些东西也不是很难，而且都是常用的，相信很多人都了如指掌了，多说亦是废话，直接上代码看的反而更清楚。 DownLoad DemoDownLoad Demo(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"底部导航栏","slug":"底部导航栏","permalink":"https://student9128.github.io/tags/底部导航栏/"}]},{"title":"Android底部导航栏实现（一）之BottomNavigationBar","slug":"Android底部导航栏实现（一）之BottomNavigationBar","date":"2016-12-05T04:07:44.000Z","updated":"2018-07-10T06:27:04.056Z","comments":true,"path":"2016/12/05/Android底部导航栏实现（一）之BottomNavigationBar/","link":"","permalink":"https://student9128.github.io/2016/12/05/Android底部导航栏实现（一）之BottomNavigationBar/","excerpt":"","text":"BottomNavigationBar这个控件的使用之前已经写过，这里不再赘述，详情请参考BottomNavigationBar的使用。 下面直接上代码： 初始化及相关设置：1234567891011121314mBottomNavigationBar = (BottomNavigationBar) view.findViewById(R.id.bottom_navigation_bar); mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_STATIC); mBottomNavigationBar.setMode(BottomNavigationBar.MODE_FIXED); mBottomNavigationBar.addItem(new BottomNavigationItem(R.drawable.home_fill, getString(R.string.item_home)).setInactiveIconResource(R.drawable.home).setActiveColorResource(R.color.colorPrimary).setInActiveColorResource(R.color.black_1)) .addItem(new BottomNavigationItem(R.drawable.location_fill, getString(R.string.item_location)).setInactiveIconResource(R.drawable.location).setActiveColorResource(R.color.colorPrimary).setInActiveColorResource(R.color.black_1)) .addItem(new BottomNavigationItem(R.drawable.like_fill, getString(R.string.item_like)).setInactiveIconResource(R.drawable.like).setActiveColorResource(R.color.colorPrimary).setInActiveColorResource(R.color.black_1)) .addItem(new BottomNavigationItem(R.drawable.person_fill, getString(R.string.item_person)).setInactiveIconResource(R.drawable.person).setActiveColorResource(R.color.colorPrimary).setInActiveColorResource(R.color.black_1)) .setFirstSelectedPosition(0) .initialise(); mBottomNavigationBar.setTabSelectedListener(this); setDefaultFragment(); Tab的切换：1234567891011121314151617181920212223242526272829303132@Overridepublic void onTabSelected(int position) &#123; FragmentTransaction beginTransaction = getFragmentManager().beginTransaction(); switch (position) &#123; case 0: if (mHomeFragment == null) &#123; mHomeFragment = HomeFragment.newInstance(getString(R.string.item_home)); &#125; beginTransaction.replace(R.id.sub_content, mHomeFragment); break; case 1: if (mLocationFragment == null) &#123; mLocationFragment = LocationFragment.newInstance(getString(R.string.item_location)); &#125; beginTransaction.replace(R.id.sub_content, mLocationFragment); break; case 2: if (mLikeFragment == null) &#123; mLikeFragment = LikeFragment.newInstance(getString(R.string.item_like)); &#125; beginTransaction.replace(R.id.sub_content, mLikeFragment); break; case 3: if (mPersonFragment == null) &#123; mPersonFragment = PersonFragment.newInstance(getString(R.string.item_person)); &#125; beginTransaction.replace(R.id.sub_content, mPersonFragment); &#125; beginTransaction.commit();&#125; 说明：这几篇文章没有过多的文字叙述，因为这些东西也不是很难，而且都是常用的，相信很多人都了如指掌了，多说亦是废话，直接上代码看的反而更清楚。 DownLoad DemoDownLoad Demo(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"底部导航栏","slug":"底部导航栏","permalink":"https://student9128.github.io/tags/底部导航栏/"}]},{"title":"五种方式实现Android底部导航栏","slug":"五种方式实现Android底部导航栏","date":"2016-12-05T04:05:50.000Z","updated":"2018-07-10T06:37:39.301Z","comments":true,"path":"2016/12/05/五种方式实现Android底部导航栏/","link":"","permalink":"https://student9128.github.io/2016/12/05/五种方式实现Android底部导航栏/","excerpt":"","text":"底部导航栏目前基本上每个app必备的。一般放到首页的，来显示app整个内容的框架。 效果图 实现导航栏的五种方式 如上图导航栏上显示的，这里面我总结了这几种，下面会就这几种方式一一记录到文章中。如果写到一篇里估计有点多，还条例不怎么清晰。接下来会记录这几篇文章。其中TabHost这种方法比较老，就不再记录了。 Android底部导航栏实现（一）之BottomNavigationBarAndroid底部导航栏实现（二）之RadioGroupAndroid底部导航栏实现（三）之TextView+LinearLayoutAndroid底部导航栏实现（四）之TabLayout+ViewPager 这个Demo里还同时使用了DrawerLayout, ToolBar, NavigationView, SnackBar, 有需要的也可以点进去查看。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"底部导航栏","slug":"底部导航栏","permalink":"https://student9128.github.io/tags/底部导航栏/"}]},{"title":"ToolBar的使用及overflow的定制问题","slug":"ToolBar的使用及overflow的定制问题","date":"2016-12-02T06:58:26.000Z","updated":"2018-07-10T06:47:47.781Z","comments":true,"path":"2016/12/02/ToolBar的使用及overflow的定制问题/","link":"","permalink":"https://student9128.github.io/2016/12/02/ToolBar的使用及overflow的定制问题/","excerpt":"","text":"ToolBar，顾名思义，工具栏。这是继ActionBar之后的新工具栏，也是Google推崇的。相信很多Android Developers都在使用了。不过这里我自己用的时候也发现了些小问题。这里记录一下。 效果图 这个是我做了些改变后的效果图 ToolBar的一般使用 布局 123456&lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;@color/colorPrimary&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;&lt;/android.support.v7.widget.Toolbar&gt; 代码 1234mToolbar = (Toolbar) findViewById(R.id.tool_bar);setSupportActionBar(mToolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); Theme 设置为NoActionBar 123456&lt;style name=&quot;BaseTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt; 可以看到效果是这样的： 图标和字体显示的都是黑色的，我看着不好看，想要显示白色的，那么可以这样改变： 方法一 为Toolbar添加theme 1234567&lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:background=&quot;@color/colorPrimary&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot; /&gt; 方法二 将Theme中的Light去掉 1&lt;style name=&quot;BaseTheme&quot; parent=&quot;Theme.AppCompat.NoActionBar&quot;&gt; 这是因为默认暗色主题的话，toolbar的图标和字体会默认显示白色。亮色主题的话，toolbar的图标和字体会默认显示黑色。那么问题来了，虽然图标和字体变为白色了。如下图： overflow menu的背景是黑色的，我也想要它是白色。方法： 为menu添加上白色主题即可1app:popupTheme=&quot;@style/Theme.AppCompat.Light&quot; 效果如下： 默认navaigationIcon是返回箭头，修改图标：123mToolBar.setNavigationIcon(R.drawable.navigation);app:navigationIcon=&quot;@drawable/navigation&quot; 那么还有一个问题就是，share默认全是大写，而我写的明明是小写。那就需要改了。 1234567&lt;!--添加设置到Theme里--&gt; &lt;item name=&quot;android:actionMenuTextAppearance&quot;&gt;@style/MenuTextStyle&lt;/item&gt; &lt;style name=&quot;MenuTextStyle&quot;&gt; &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&lt;!--调整字体大小--&gt; &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt; &lt;/style&gt; 注意: 1.这里的ToolBar主题要设置为:android:theme=”@style/ThemeOverlay.AppCompat.Dark.ActionBar” 2.这些代码要写在values-v21的styles里面才生效 overflow menu的位置及色调我们知道，overflow menu默认是覆盖在toolbar之上的，我想移动到下面怎么办呢？1234567891011&lt;!--添加到Theme里--&gt; &lt;item name=&quot;actionOverflowMenuStyle&quot;&gt;@style/OverflowMenuStyle&lt;/item&gt; &lt;style name=&quot;OverflowMenuStyle&quot; parent=&quot;@style/Widget.AppCompat.PopupMenu.Overflow&quot;&gt; &lt;!-- 是否覆盖在Toolbar之上 --&gt; &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt; &lt;!--overflow menu背景颜色 --&gt; &lt;item name=&quot;android:popupBackground&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;android:dropDownVerticalOffset&quot;&gt;4dp&lt;/item&gt; &lt;item name=&quot;android:dropDownHorizontalOffset&quot;&gt;0dp&lt;/item&gt; &lt;/style&gt; 注意： 这些代码要写在values-v21的styles里面才生效. 完整的布局及Theme 这里把最终的布局及Theme设置附上. 布局 1234567android:id=&quot;@+id/tool_bar&quot;android:layout_width=&quot;match_parent&quot;android:layout_height=&quot;?attr/actionBarSize&quot;android:background=&quot;@color/colorPrimary&quot;android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;app:navigationIcon=&quot;@drawable/navigation&quot;/&gt; styles.xml 这个完全写到values-v21即可 1234567891011121314151617181920212223 &lt;style name=&quot;BaseTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;item name=&quot;actionOverflowMenuStyle&quot;&gt;@style/OverflowMenuStyle&lt;/item&gt; &lt;item name=&quot;android:actionMenuTextAppearance&quot;&gt;@style/MenuTextStyle&lt;/item&gt; &lt;/style&gt;&lt;!--menu text style--&gt; &lt;style name=&quot;MenuTextStyle&quot;&gt; &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt; &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt; &lt;/style&gt; &lt;!--overflow menu style--&gt; &lt;style name=&quot;OverflowMenuStyle&quot; parent=&quot;@style/Widget.AppCompat.PopupMenu.Overflow&quot;&gt; &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt; &lt;item name=&quot;android:popupBackground&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;android:dropDownVerticalOffset&quot;&gt;4dp&lt;/item&gt; &lt;item name=&quot;android:dropDownHorizontalOffset&quot;&gt;0dp&lt;/item&gt; &lt;/style&gt; 好了，到这里已经实现了效果里面的内容。 当然，这里面还有其他要设置的。这里没总结。如果问题的可以分享下。~","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"ToolBar","slug":"ToolBar","permalink":"https://student9128.github.io/tags/ToolBar/"}]},{"title":"NavigationView的使用","slug":"NavigationView的使用","date":"2016-11-23T15:50:14.000Z","updated":"2018-07-10T06:49:12.389Z","comments":true,"path":"2016/11/23/NavigationView的使用/","link":"","permalink":"https://student9128.github.io/2016/11/23/NavigationView的使用/","excerpt":"","text":"在Material Design中，NavigationView也是必不可少的一个成员。最常见的使用地方就是侧滑菜单，配合DrawerLayout使用。DarwerLayout的使用已经记录，这里记录写NavigationView的简单使用。 效果图看一下NavigationView在DrawerLayout中的体现效果 这里侧滑菜单中的菜单整个就是NavigationView 实现方法 下面看一下如何实现方法 添加依赖1compile &apos;com.android.support:design:25.0.1&apos; 这一步是基础。可以直接在gradle中添加，也可通过Project Struceure添加。 布局12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/drawer_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot; tools:context=&quot;com.student.kevin.navigationviewdemo.MainActivity&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;@color/colorPrimary&quot; android:fitsSystemWindows=&quot;true&quot; /&gt; &lt;ImageView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:layout_marginTop=&quot;100dp&quot; android:layout_gravity=&quot;center_horizontal&quot; android:src=&quot;@drawable/hello&quot;/&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10dp&quot; android:gravity=&quot;center_horizontal&quot; android:text=&quot;This is from Kevin :)&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@color/colorAccent&quot; android:textSize=&quot;25sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;android.support.design.widget.NavigationView android:background=&quot;@color/white&quot; android:id=&quot;@+id/navigation_view&quot; android:layout_width=&quot;320dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_gravity=&quot;start&quot; android:fitsSystemWindows=&quot;true&quot; app:headerLayout=&quot;@layout/navigation_header_layout&quot; app:menu=&quot;@menu/navigation_menu&quot;&gt;&lt;/android.support.design.widget.NavigationView&gt;&lt;/android.support.v4.widget.DrawerLayout&gt; 其他可以不看，主要看NavigationView在DrawerLayout中的布局即可 这里有两个属性起关键作用12app:headerLayout=&quot;@layout/navigation_header_layout&quot;app:menu=&quot;@menu/navigation_menu&quot; 是的，这两位兄弟可以说基本顶起了NavigationView外表的整片天。 headerLayout123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_header_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;200dp&quot; android:background=&quot;@drawable/icon_header&quot;/&gt;&lt;/LinearLayout&gt; 就是一张图片 menu1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;group android:id=&quot;@+id/item_one&quot;&gt; &lt;item android:id=&quot;@+id/home&quot; android:checkable=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:title=&quot;首页&quot; /&gt; &lt;/group&gt; &lt;group android:id=&quot;@+id/item_two&quot;&gt; &lt;item android:id=&quot;@+id/news&quot; android:checkable=&quot;true&quot; android:icon=&quot;@drawable/hello&quot; android:title=&quot;新闻&quot; /&gt; &lt;/group&gt; &lt;group android:id=&quot;@+id/item_three&quot;&gt; &lt;item android:id=&quot;@+id/favorite&quot; android:checkable=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:title=&quot;收藏&quot; /&gt; &lt;/group&gt; &lt;group android:id=&quot;@+id/item_four&quot;&gt; &lt;item android:id=&quot;@+id/settings&quot; android:checkable=&quot;true&quot; android:icon=&quot;@drawable/hello&quot; android:title=&quot;设置&quot; /&gt; &lt;/group&gt;&lt;/menu&gt; 这个不见跟Toolbar或者Actionbar上的menu的写法是一样的。不过效果不同。 简单说一下，加group和不加group的情况。可以看到效果图上条目之间有条横线，这就是家group的效果。去掉group标签就没横线了。 代码123456789101112131415161718192021222324View headerView = mNavigationView.getHeaderView(0);//get header view，获取头布局mNavigationView.setItemIconTintList(null);//set null for item icon tint，这样使得icon颜色恢复本色//设置条目选择事件mNavigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123; @Override public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123; switch (item.getGroupId()) &#123; case R.id.item_one: showSnack(mDrawerLayout, &quot;Home&quot;); break; case R.id.item_two: showSnack(mDrawerLayout, &quot;News&quot;); break; case R.id.item_three: showSnack(mDrawerLayout, &quot;Favorite&quot;); break; case R.id.item_four: showSnack(mDrawerLayout, &quot;Settins&quot;); break; &#125; return true; &#125; &#125;); 这个Demo效果里我使用了Toolbar,DrawerLayout,NavigationView,Snackbar。有关这几个控件的具体效果实现，可以参考前面写过的几篇文章。 Demo下载下载一下载二(github) github上之前传的有的导入Android Studio会有问题，CSDN上面的100%能导入Android Studio。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"NavigationView","slug":"NavigationView","permalink":"https://student9128.github.io/tags/NavigationView/"}]},{"title":"CoordinatorLayout的使用","slug":"CoordinatorLayout的使用","date":"2016-11-22T07:58:01.000Z","updated":"2018-07-10T06:51:20.931Z","comments":true,"path":"2016/11/22/CoordinatorLayout的使用/","link":"","permalink":"https://student9128.github.io/2016/11/22/CoordinatorLayout的使用/","excerpt":"","text":"最近看到CoordinatorLayout的一些效果和之前需要做的效果一样，CoordinatorLayout也是Material Degisn里面的一个控件。就写了下来。这里简单记录一下CoordinatorLayout的简单使用。 效果图下面看一下效果 简单效果图 实践效果图 实践效果图是之前一个需求里面用到过，当时没有用CoordinatorLayout，费了大劲了。这种效果现在也很常见，用CoordinatorLayout很容易实现。这里面用了ViewPager, TabLayout, RecyclerView, CardView, Toolbar, CoorinatorLayout，也算是把这些都做个练习吧。下面简单实现下效果 效果实现效果一：布局123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/coordinaotr_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot;//注意 &gt; &lt;android.support.design.widget.AppBarLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;@color/green&quot; app:layout_scrollFlags=&quot;scroll|enterAlways&quot;//注意 app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;Hello&quot; android:gravity=&quot;center_vertical&quot; android:textColor=&quot;@color/white&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recycler_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;//注意&lt;/android.support.v7.widget.RecyclerView&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; 代码 这里代码就不贴了，只是一些findViewById，之后设置显示RecyclerView。重点是布局，布局写好就基本可以实现效果了。 效果二布局123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/coorinator_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot;//注意 &gt; &lt;android.support.design.widget.AppBarLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;300dp&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;//注意 &lt;android.support.design.widget.CollapsingToolbarLayout android:id=&quot;@+id/collapsing_toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:contentScrim=&quot;@color/white&quot; app:expandedTitleMarginEnd=&quot;64dp&quot; app:expandedTitleMarginStart=&quot;48dp&quot; app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt;//注意 &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;@color/colorAccent&quot; android:fitsSystemWindows=&quot;true&quot;//注意 app:layout_scrollFlags=&quot;scroll|enterAlways&quot;//注意 app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&gt;//注意 &lt;/android.support.v7.widget.Toolbar&gt; &lt;LinearLayout android:id=&quot;@+id/tool_bar_1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;150dp&quot; android:background=&quot;@color/teal&quot; android:orientation=&quot;vertical&quot; app:layout_scrollFlags=&quot;scroll|enterAlways&quot;//注意 app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;45dp&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Hello&quot;/&gt; &lt;/LinearLayout&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recycler_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;//注意&lt;/android.support.v7.widget.RecyclerView&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; 代码 其他代码同效果一，这里只是使用了CollapsingToolbar的一些属性设置。如下：123mCollapsingToolbarLayout.setTitle(&quot;Kevin&quot;); mCollapsingToolbarLayout.setExpandedTitleColor(ContextCompat.getColor(SecondActivity.this, R.color.white)); mCollapsingToolbarLayout.setStatusBarScrimColor(ContextCompat.getColor(SecondActivity.this, R.color.colorAccent)); 效果三123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/coorinator_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@android:color/background_light&quot; android:fitsSystemWindows=&quot;true&quot;//注意 android:orientation=&quot;vertical&quot;&gt; &lt;android.support.design.widget.AppBarLayout android:id=&quot;@+id/app_bar_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;200dp&quot; android:fitsSystemWindows=&quot;true&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id=&quot;@+id/collapsing_toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:expandedTitleMarginEnd=&quot;64dp&quot; app:expandedTitleMarginStart=&quot;48dp&quot; app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt;//注意 &lt;ImageView android:id=&quot;@+id/iv_header_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot;//注意 android:scaleType=&quot;centerCrop&quot; android:src=&quot;@drawable/slideimage1&quot; app:layout_collapseMode=&quot;parallax&quot;/&gt;//注意 &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; app:layout_collapseMode=&quot;pin&quot;//注意 app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&gt;&lt;/android.support.v7.widget.Toolbar&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recycler_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;//注意&lt;/android.support.v7.widget.RecyclerView&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; 代码 这里仍然贴出区别的代码12345678910111213141516171819202122232425262728mToolbar.setOnMenuItemClickListener(this);mToolbar.setNavigationOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; finish(); &#125; &#125;); @Override public boolean onMenuItemClick(MenuItem item) &#123; switch (item.getItemId()) &#123; case R.id.message: Snackbar.make(mCoordinatorLayout, &quot;Message&quot;, Snackbar.LENGTH_SHORT).show(); break; case R.id.share: Snackbar.make(mCoordinatorLayout, &quot;Share&quot;, Snackbar.LENGTH_SHORT).show(); break; case R.id.settings: Snackbar.make(mCoordinatorLayout, &quot;Settings&quot;, Snackbar.LENGTH_SHORT).show(); break; default: break; &#125; return false; &#125; 对比总结 贴了这么多布局代码，发现都一样，只是里面的小区别，正是这些小区别，改变了不同的效果可以看到我在布局中都添加了“//注意”的标识，这些地方是关键，影响着我们的效果是否能够实现。 1android:fitsSystemWindows=&quot;true&quot;//字面意思可以知道是适应系统窗口，当需要延伸至状态栏的时候要加此属性。 1app:layout_scrollFlags=&quot;scroll|enterAlways&quot;//滚动的效果。 enterAlways、enterAlwaysCollapsed、exitUntilCollapsed他们会决定什么时候滚动，怎么滚动 12app:layout_collapseMode=&quot;parallax&quot;//视差app:layout_collapseMode=&quot;pin&quot;//固定 可以看到效果三布局ImagView和Toolbar分别设置了这个属性，导致了图片有视差效果，Toolbar滑动顶部会固定。1app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;//字面意思是布局行为 这个是重点，没有添加behavior，那么会发现RecyclerView不会沉在AppBarLayout的下面，而且这个界面不会滚动。所以要实现效果一定要加layout_behavior属性，实现什么样的behavior就要使用不同的behavior。 这个官方提供的也就那么几种，如果你有更多需求，那只能自己定义了 这些控件记录细了也是无用，没用过的个人感觉直接上手写两遍，有什么区别，把属性写入代码对比下效果便知。因此到底什么区别就不细说了。说也说不清楚，都是废话。 Demo下载####下载一下载二(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"CoordinatorLayout","slug":"CoordinatorLayout","permalink":"https://student9128.github.io/tags/CoordinatorLayout/"}]},{"title":"Snackbar的使用","slug":"Snackbar的使用","date":"2016-11-21T15:56:43.000Z","updated":"2018-07-10T06:52:28.760Z","comments":true,"path":"2016/11/21/Snackbar的使用/","link":"","permalink":"https://student9128.github.io/2016/11/21/Snackbar的使用/","excerpt":"","text":"","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"Snackbar的使用","slug":"Snackbar的使用","permalink":"https://student9128.github.io/tags/Snackbar的使用/"}]},{"title":"DrawerLayout的使用","slug":"DrawerLayout的使用","date":"2016-11-20T14:58:01.000Z","updated":"2018-07-10T06:53:51.384Z","comments":true,"path":"2016/11/20/DrawerLayout的使用/","link":"","permalink":"https://student9128.github.io/2016/11/20/DrawerLayout的使用/","excerpt":"","text":"目前很多应用都有侧滑菜单，最初的侧滑菜单很多都有SildingMenu,相信很多人都用的很熟。Google推出了自己人侧滑菜单DrawerLayout,相信很多人已经在用了。这里记录一下DrawerLayout的使用。 DrawerLayout目前大体有两种形式吧。 效果图下面看一下效果图： 效果一 效果二 其实还有第三种效果，就是第一种的侧滑部分的状态栏加上。不过目前一般都是不带状态栏的，这样看起来效果会更好些。 两种效果其实写法都是一样的，只是ToolBar和DrawerLayout的布局位置不同而已。 布局代码 效果一布局 12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/drawer_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot; &lt;--这里一定要添加，否则状态栏颜色达不到你要的效果--&gt; tools:context=&quot;com.student.kevin.drawerlayout.MainActivity&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; &gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_marginTop=&quot;@dimen/topMargin&quot; android:background=&quot;@color/green&quot;&gt;&lt;/android.support.v7.widget.Toolbar&gt; //...这里略去其他布局代码&lt;/android.support.v4.widget.DrawerLayout&gt; 效果二布局 12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_marginTop=&quot;@dimen/topMargin&quot; android:background=&quot;@color/blue&quot;&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;android.support.v4.widget.DrawerLayout android:id=&quot;@+id/drawer_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; //...这里略去其他布局代码 &lt;/android.support.v4.widget.DrawerLayout&gt;&lt;/LinearLayout&gt; 当然，都是DrawerLayout+ToolBar，代码写法肯定是相同的。 代码12345678910111213mToolbar = (Toolbar) findViewById(R.id.tool_bar);mToolbar.setTitle(&quot;Kevin&quot;);//customize the title,个性化设置titlemToolbar.setTitleTextColor(ContextCompat.getColor(this, R.color.white));//设置title颜色setSupportActionBar(mToolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true);//show back button and make it enabledmDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);mActionBarDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, mToolbar, R.string.drawer_layout_open, R.string.drawer_layout_close);mActionBarDrawerToggle.setDrawerIndicatorEnabled(true);mActionBarDrawerToggle.setHomeAsUpIndicator(R.mipmap.ic_launcher);//channge the icon,改变图标mActionBarDrawerToggle.syncState();////show the default icon and sync the DrawerToggle state,如果你想改变图标的话，这句话要去掉。这个会使用默认的三杠图标mDrawerLayout.setDrawerListener(mActionBarDrawerToggle);mDrawerLayout.setStatusBarBackgroundColor(ContextCompat.getColor(this, R.color.green));//设置状态栏颜色 上面代码就是DrawerLayout的基本使用 实现效果一 但是只使用这样的话达不到效果一的效果的，不过可以实现效果二。要想实现效果一，加代码^_^ 添加代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125/** * Created by Kevin on 2016/11/17. * Blog:http://blog.csdn.net/student9128 * Description: this framelayout from the internet */public class ScrimInsetsFrameLayout extends FrameLayout &#123; private Drawable mInsetForeground; private Rect mInsets; private Rect mTempRect = new Rect(); private OnInsetsCallback mOnInsetsCallback; public ScrimInsetsFrameLayout(Context context) &#123; super(context); init(context, null, 0); &#125; public ScrimInsetsFrameLayout(Context context, AttributeSet attrs) &#123; super(context, attrs); init(context, attrs, 0); &#125; public ScrimInsetsFrameLayout( Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); init(context, attrs, defStyle); &#125; private void init(Context context, AttributeSet attrs, int defStyle) &#123; final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ScrimInsetsView, defStyle, 0); if (a == null) &#123; return; &#125; mInsetForeground = a.getDrawable( R.styleable.ScrimInsetsView_insetForeground); a.recycle(); setWillNotDraw(true); &#125; @Override protected boolean fitSystemWindows(Rect insets) &#123; mInsets = new Rect(insets); setWillNotDraw(mInsetForeground == null); ViewCompat.postInvalidateOnAnimation(this); if (mOnInsetsCallback != null) &#123; mOnInsetsCallback.onInsetsChanged(insets); &#125; return true; // consume insets &#125; @Override public void draw(Canvas canvas) &#123; super.draw(canvas); int width = getWidth(); int height = getHeight(); if (mInsets != null &amp;&amp; mInsetForeground != null) &#123; int sc = canvas.save(); canvas.translate(getScrollX(), getScrollY()); // Top mTempRect.set(0, 0, width, mInsets.top); mInsetForeground.setBounds(mTempRect); mInsetForeground.draw(canvas); // Bottom mTempRect.set(0, height - mInsets.bottom, width, height); mInsetForeground.setBounds(mTempRect); mInsetForeground.draw(canvas); // Left mTempRect.set( 0, mInsets.top, mInsets.left, height - mInsets.bottom); mInsetForeground.setBounds(mTempRect); mInsetForeground.draw(canvas); // Right mTempRect.set( width - mInsets.right, mInsets.top, width, height - mInsets.bottom); mInsetForeground.setBounds(mTempRect); mInsetForeground.draw(canvas); canvas.restoreToCount(sc); &#125; &#125; @Override protected void onAttachedToWindow() &#123; super.onAttachedToWindow(); if (mInsetForeground != null) &#123; mInsetForeground.setCallback(this); &#125; &#125; @Override protected void onDetachedFromWindow() &#123; super.onDetachedFromWindow(); if (mInsetForeground != null) &#123; mInsetForeground.setCallback(null); &#125; &#125; /** * Allows the calling container to specify a callback for custom * processing when insets change (i.e. when &#123;@link #fitSystemWindows(Rect)&#125; * is called. This is useful for setting padding on UI elements * based on UI chrome insets (e.g. a Google Map or a ListView). * When using with ListView or GridView, remember to set * clipToPadding to false. */ public void setOnInsetsCallback(OnInsetsCallback onInsetsCallback) &#123; mOnInsetsCallback = onInsetsCallback; &#125; public static interface OnInsetsCallback &#123; public void onInsetsChanged(Rect insets); &#125;&#125; 注：此类来自网上。使用：怎么使用呢？直接在布局中添加此FrameLayout即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/drawer_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot; tools:context=&quot;com.student.kevin.drawerlayout.MainActivity&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; &gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/tool_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_marginTop=&quot;@dimen/topMargin&quot; android:background=&quot;@color/green&quot;&gt;&lt;/android.support.v7.widget.Toolbar&gt; &lt;ImageView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/icon_two&quot;/&gt; &lt;Button android:id=&quot;@+id/btn_next_page&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;10dp&quot; android:background=&quot;@color/blue&quot; android:text=&quot;Click To Next Page&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@color/white&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;com.student.kevin.drawerlayout.ScrimInsetsFrameLayout android:layout_width=&quot;300dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_gravity=&quot;start&quot; android:background=&quot;@color/white&quot; android:fitsSystemWindows=&quot;true&quot; &gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_menu_header&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:scaleType=&quot;fitXY&quot; android:src=&quot;@drawable/icon_two&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_menu_item&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;15dp&quot; android:layout_marginTop=&quot;10dp&quot; android:text=&quot;@string/menu_tips&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;/com.student.kevin.drawerlayout.ScrimInsetsFrameLayout&gt;&lt;/android.support.v4.widget.DrawerLayout&gt; 这个类的效果是让侧滑菜单的Menu区域延伸到状态栏。不过同时还要在主题方面加设置，目前只能达到第三种效果，就是带有状态栏的，而且是默认的状态栏，如下图 主题设置：在res/values-v21/styles中设置：123456&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;android:windowDrawsSystemBarBackgrounds&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt; &lt;item name=&quot;drawerArrowStyle&quot;&gt;@style/DrawerArrowStyle&lt;/item&gt;//set the title color，设置toolbar标题颜色 &lt;/style&gt; 好了这样就达到效果了。效果二和三就不用写了，因为效果一中减少一些设置就可以达到效果二和效果三了。 DrawerArrowToggle颜色和动画的设置1234&lt;style name=&quot;DrawerArrowStyle&quot; parent=&quot;Widget.AppCompat.DrawerArrowToggle&quot;&gt; &lt;item name=&quot;spinBars&quot;&gt;true&lt;/item&gt;//true就会有旋转动画，false就不会有旋转动画 &lt;item name=&quot;color&quot;&gt;@android:color/white&lt;/item&gt;//默认是黑色，这里设置为白色 &lt;/style&gt; 如果需要的话可以看看。:-) 有CSDN的可以下载一，没有的可以下载github。看方便喽 Demo下载下载一下载二（github）","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"DrawerLayout","slug":"DrawerLayout","permalink":"https://student9128.github.io/tags/DrawerLayout/"}]},{"title":"BottomNavigationBar的使用","slug":"BottomNavigationBar的使用","date":"2016-11-20T01:07:50.000Z","updated":"2018-07-10T06:55:09.635Z","comments":true,"path":"2016/11/20/BottomNavigationBar的使用/","link":"","permalink":"https://student9128.github.io/2016/11/20/BottomNavigationBar的使用/","excerpt":"","text":"最近在写底部导航栏，平时用到的就常见了，不过Material Desigh的导航栏却用的不多。在谷歌官方文档上有这种设计，可惜却没用过。所以学习了一下，这里记录下来。 那么BottomNavigationBar是什么样子呢？请看图 这个是Google Material上面的图。可以看到有谷歌对设计的建议 下面看下我的效果图： 添加依赖 首先使用BottomNavigationBar前要添加依赖。 布局代码：12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/activity_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.student.kevin.bottomnavigationbar.MainActivity&quot;&gt; &lt;LinearLayout android:id=&quot;@+id/ll_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:text=&quot;Hello World!&quot;&gt;&lt;/LinearLayout&gt; &lt;com.ashokvarma.bottomnavigation.BottomNavigationBar android:id=&quot;@+id/bottom_navigation_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentBottom=&quot;true&quot;&gt;&lt;/com.ashokvarma.bottomnavigation.BottomNavigationBar&gt;&lt;/RelativeLayout&gt; 也就是与其他布局使用方法一样，直接在布局里面添加就行了。 代码中的使用1234567mBottomNavigationBar = (BottomNavigationBar) findViewById(R.id.bottom_navigation_bar);mBottomNavigationBar.addItem(new BottomNavigationItem(R.drawable.icon_one, R.string.tab_one).setActiveColorResource(R.color.green).setBadgeItem(badgeItem)) .addItem(new BottomNavigationItem(R.drawable.icon_two, R.string.tab_two).setActiveColorResource(R.color.orange)) .addItem(new BottomNavigationItem(R.drawable.icon_three, R.string.tab_three).setActiveColorResource(R.color.lime)) .addItem(new BottomNavigationItem(R.drawable.icon_four, R.string.tab_four))//依次添加item,分别icon和名称 .setFirstSelectedPosition(0)//设置默认选择item .initialise();//初始化 这样底部导航栏就有了，是不是很简单。相比平时写的导航栏确实简单的很多。这样还不行，光有导航栏了，还要有监听，因为我们要根据点击导航栏的tab来切换不同的fragment。所以要添加监听事件。 添加监听，重写方法，我们最常做的事情这样在重写的方法里进行Fragment的切换即可 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@Overridepublic void onTabSelected(int position) &#123; FragmentTransaction transaction = getSupportFragmentManager().beginTransaction(); switch (position) &#123; case 0: if (mFragmentOne == null) &#123; mFragmentOne = FragmentOne.newInstance(&quot;First Fragment&quot;); &#125; transaction.replace(R.id.ll_content, mFragmentOne); break; case 1: if (mFragmentTwo == null) &#123; mFragmentTwo = FragmentTwo.newInstance(&quot;Second Fragment&quot;); &#125; transaction.replace(R.id.ll_content, mFragmentTwo); break; case 2: if (mFragmentThree == null) &#123; mFragmentThree = FragmentThree.newInstance(&quot;Third Fragment&quot;); &#125; transaction.replace(R.id.ll_content, mFragmentThree); break; case 3: if (mFragmentFour == null) &#123; mFragmentFour = FragmentFour.newInstance(&quot;Forth Fragment&quot;); &#125; transaction.replace(R.id.ll_content, mFragmentFour); break; default: if (mFragmentOne == null) &#123; mFragmentOne = FragmentOne.newInstance(&quot;First Fragment&quot;); &#125; transaction.replace(R.id.ll_content, mFragmentOne); break; &#125; transaction.commit();&#125;@Overridepublic void onTabUnselected(int position) &#123;&#125;@Overridepublic void onTabReselected(int position) &#123;&#125; 这样出现的只是默认的效果，我们如果要自己需要的颜色背景呢？当然有方法 个性化BottomNavigationBar BottomNavigationBar已经提供给了我们方法12mBottomNavigationBar.setMode(BottomNavigationBar.MODE_SHIFTING); mBottomNavigationBar.setBackgroundStyle(BottomNavigationBar.BACKGROUND_STYLE_STATIC); Mode和BackgroundStyle分别有三种，分别包含一种Default模式 效果图这里截取几种效果图： Default默认效果 FIXED+STATIC FIXED+RIPPLE SHIFTING+RIPPLE SHIFTING+STATIC效果这里就不传了，通过对比可以发现，默认的效果其实就是SHIFTING+STATIC效果 设置导航栏颜色当然导航栏的颜色也是可以设置成固定颜色的，刚开始的效果图可以看到导航栏是蓝色。默认颜色的colorAccent1mBottomNavigationBar.setBarBackgroundColor(R.color.blue);//set background color for navigation bar，设置底部导航栏颜色 添加黄色小圆点还上面的效果图上可以看到，第一个tab上面有一个黄色的小圆点。这跟小红点是一样的，只是我设置颜色为黄色的了。这个就是添加了一个BadgeItem.12345678BadgeItem badgeItem = new BadgeItem(); badgeItem.setHideOnSelect(false) .setText(&quot;10&quot;) .setBackgroundColorResource(R.color.orange) .setBorderWidth(0);//导航栏中的tab添加小圆点mBottomNavigationBar.addItem(new BottomNavigationItem(R.drawable.icon_one, R.string.tab_one).setActiveColorResource(R.color.green).setBadgeItem(badgeItem)); 不知道有没有感觉这个很好用呢？我感觉还不错，有需要的可以看一下哦~ 有CSDN的可以下载一，没有的可以下载github。看方便喽 如果想用其他方法，也可以查看这篇文章： 五种方式实现Android底部导航栏 Demo下载下载一下载二(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"BottomNavigationBar","slug":"BottomNavigationBar","permalink":"https://student9128.github.io/tags/BottomNavigationBar/"}]},{"title":"仿虾米音乐引导页面","slug":"仿虾米音乐引导页面","date":"2016-11-06T13:32:37.000Z","updated":"2018-07-10T07:08:13.339Z","comments":true,"path":"2016/11/06/仿虾米音乐引导页面/","link":"","permalink":"https://student9128.github.io/2016/11/06/仿虾米音乐引导页面/","excerpt":"","text":"昨天已经写过《仿易信引导页面》，虾米音乐引导页面和易信引导页面其实是一样的，它们唯一的大区别就是易信用了一段视频，虾米音乐用了四段视频，所以我在这里简单记录一下。 首先看效果图： 与易信引导页面的区别虾米音乐引导页面同样用的视频+ViewPager,不过它用的是四段视频，而且当手动去滑ViewPager的时候，视频会跟着切换,也就是说不同界面显示的不同视频，而且视频只轮播一遍。易信则一段视频一直无限循环播放。 而raw里面放的视频没次只能读取一个。于是我就用了下面的方法。跟随ViewPager的切换来切换视频 1234567891011121314151617181920mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123; @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123; &#125; @Override public void onPageSelected(int position) &#123; setIndicator(position); currentPosition = position; getCurrentVideo(currentPosition);//根据ViewPager位置来获取播放相应的视频 mVideoView.start();//别忘了播放视频 Log.i(&quot;kevin&quot;, position + &quot;&quot;); &#125; @Override public void onPageScrollStateChanged(int state) &#123; &#125; &#125;); 获取相应视频代码关键时刻，switch总是很给力。不过这只是引导页面，视频数量少。多了就要另想他法了。不过app里面也不可能放那么多大文件，多的就要网络获取了。 12345678910111213141516private void getCurrentVideo(int position) &#123; switch (position) &#123; case 0: mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.splash_1)); break; case 1: mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.splash_2)); break; case 2: mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.splash_3)); break; case 3: mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.splash_4)); break; &#125; &#125; 问题一这里虽然这样设置了，你会发现运行后第一个视频是黑屏无法播放。为什么呢？因为ViewPager的轮播获取的position是从1开始的，所以不会播放第一个视频。于是就只能在初始化的时候设置第一个视频的播放情况。这里我也给出了我的方法。 1234mViewPager.setCurrentItem(currentPosition); if (currentPosition == 0) &#123; mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.splash_1)); mVideoView.start(); &#125; 问题二我添加的ViewPager的自动轮播，会不停的将position添加1，所以要加控制。 123if (mViewPager.getCurrentItem() &lt;= 2) &#123; mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1, true); &#125; 这里同样附上Demo 下载链接1：下载链接2(github)","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"引导页","slug":"引导页","permalink":"https://student9128.github.io/tags/引导页/"}]},{"title":"assets和raw的区别","slug":"assets和raw的区别","date":"2016-11-05T16:02:18.000Z","updated":"2018-07-10T06:59:11.206Z","comments":true,"path":"2016/11/06/assets和raw的区别/","link":"","permalink":"https://student9128.github.io/2016/11/06/assets和raw的区别/","excerpt":"","text":"最近用到了assets和raw，于是就想重新了解下它们的区别。下面记录下来。 相同点： 两者目录下的文件在打包后会原封不动的保存在apk包中，不会被编译成二进制。 不同点： raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename；assets文件夹下的文件不会被映射到R.java中，访问的时候需要AssetManager类。 raw不可以有目录结构，而assets则可以有目录结构，也就是assets目录下可以再建立文件夹 在AssertManager中不能处理单个超过1MB的文件，不然会报异常，raw没这个限制可以放个4MB的Mp3文件没问题。 assets 文件夹是存放不进行编译加工的原生文件，即该文件夹里面的文件不会像 xml， java 文件被预编译，可以存放一些图片，html，js, css 等文件。 总结来源于网络。这里记录下方便以后使用。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"仿易信引导页面","slug":"仿易信引导页面","date":"2016-11-05T15:04:08.000Z","updated":"2018-07-10T07:00:30.623Z","comments":true,"path":"2016/11/05/仿易信引导页面/","link":"","permalink":"https://student9128.github.io/2016/11/05/仿易信引导页面/","excerpt":"","text":"目前的引导页面大多数就是ViewPager,不过已经有很多app的引导页面变为动画+viewpager，第一次见到，感觉很新颖，用户体验会瞬间提升一阶。那么问题来了，这样的引导页面怎么做的呢？ 曾经一度用易信，有一次更新版本后发现易信的引导页面就是这种情况，感觉很新颖。昨天下载了虾米音乐，用的也是这样的，但跟这个有区别。 首先看效果图： 刚开始见到以为后面是动态图片做背景。后来解压了app，发现里面是一段mp4。那么这样就好写了 思路：布局为视频+viewpager布局文件：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/activity_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.kevin.tech.vedioguidedemo.MainActivity&quot;&gt; &lt;com.kevin.tech.vedioguidedemo.CustomizeVideoView android:id=&quot;@+id/video_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;200dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_marginBottom=&quot;100dp&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;150dp&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_alignParentStart=&quot;true&quot; android:layout_alignParentTop=&quot;true&quot; /&gt; &lt;LinearLayout android:id=&quot;@+id/indicator&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_marginBottom=&quot;20dp&quot; android:orientation=&quot;horizontal&quot; /&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_marginBottom=&quot;30dp&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:paddingLeft=&quot;15dp&quot; android:paddingRight=&quot;15dp&quot;&gt; &lt;Button android:id=&quot;@+id/btn_register&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@color/green_1&quot; android:text=&quot;注册&quot; android:textColor=&quot;@color/white&quot; android:textSize=&quot;16sp&quot; /&gt; &lt;Button android:id=&quot;@+id/btn_login&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;15dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@drawable/shape_bg_button_transparent&quot; android:text=&quot;登录&quot; android:textColor=&quot;@color/white&quot; android:textSize=&quot;16sp&quot; /&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt;&lt;/RelativeLayout&gt; 这里的视频布局用的是VedioView(重写过的)。其他布局就是viewpager，button的了，比较简单。 布局写好了，问题就简单了，直接加载视频就好了。 视频的加载12345678910mVideoView = (CustomizeVideoView) findViewById(R.id.video_view);mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.media));//获取视频mVideoView.start();//开始播放mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() &#123; @Override public void onCompletion(MediaPlayer mediaPlayer) &#123; mVideoView.start(); &#125; &#125;); &#125; ViewPager的添加 无限轮播viewpager正好之前我已经写过了。相信很多人也都会写。有问题的可以参考我之前写的《viewpager自添加指示器,无限轮播》和《ViewPager的自动轮播》(谢谢支持)。 Button处理 那么问题来了，视频是不是一直在播放呢，这样毫无疑问肯定会很耗内存的。所以这里还有控制视频的停止播放。即在处理Button事件的时候添加视频停止播放并释放内存即可 1mVideoView.stopPlayback();//视频停止播放并释放内存 我再Demo里写的视频的暂停和继续播放，因为易信的没有这个，自己只是练习。在真正写代码的时候我认为是不添加暂停和继续播放更符合要求的。 视频暂停： 123mVideoView.pause();currentPosition = mVideoView.getCurrentPosition();//暂停后获取当前播放的位置Toast.makeText(MainActivity.this, &quot;暂停播放&quot;, Toast.LENGTH_SHORT).show(); 视频继续： 1234mVideoView.setVideoURI(Uri.parse(&quot;android.resource://&quot; + getPackageName() + &quot;/&quot; + R.raw.media));//获取视频资源mVideoView.seekTo(currentPosition);//将视频移动到暂停时的播放位置mVideoView.start();//开始播放Toast.makeText(MainActivity.this, &quot;继续播放&quot;, Toast.LENGTH_SHORT).show(); 这里附上我写的Demo##点击下载希望当帮助到各位同学，欢迎互相学习互相交流！","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"},{"name":"引导页","slug":"引导页","permalink":"https://student9128.github.io/tags/引导页/"}]},{"title":"startActivityForResult的简单使用","slug":"startActivityForResult的简单使用","date":"2016-11-03T09:14:14.000Z","updated":"2018-07-10T06:56:21.111Z","comments":true,"path":"2016/11/03/startActivityForResult的简单使用/","link":"","permalink":"https://student9128.github.io/2016/11/03/startActivityForResult的简单使用/","excerpt":"","text":"平时Android的页面跳转常用到startActivity，不够有时候我们需要跳转页面后返回初始页面并把数据带回来，这时候就可用到startActivityForResult了。 下面看一下效果： ###下面按照使用步骤来写代码： 第一步点击按钮是执行下面代码： 12Intent intent2 = new Intent(MainActivity.this,SecondActivity.class);startActivityForResult(intent2, 0);//这里0是requestCode 第二步进入第二界面，然后返回： 123456789101112@Override public void onClick(View view) &#123; switch (view.getId())&#123; case R.id.btn_ok: Intent intent = new Intent(SecondActivity.this,MainActivity.class); Log.i(&quot;Kevin&quot;, &quot;输入框内容-------&gt;&quot;+mET.getText().toString().trim()); intent.putExtra(&quot;kevin&quot;, mET.getText().toString().trim());//将输入框内容传回去 setResult(RESULT_OK,intent);//这里RESULT_OK是resultCode; finish(); break; &#125; &#125; 第三步回来到初始界面，获取到第二界面数据并展示： 123456789@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); if(RESULT_OK==resultCode)&#123; String kevin = data.getStringExtra(&quot;kevin&quot;); Log.i(&quot;Kevin&quot;, &quot;kevin--------&gt;&quot;+kevin); Toast.makeText(getBaseContext(),kevin,Toast.LENGTH_SHORT).show(); &#125; &#125; 这里是打印出来的值：1234641-641/com.kevin.tech.statusbardemo I/Kevin: 输入框内容-------&gt;hello641-641/com.kevin.tech.statusbardemo I/Kevin: kevin--------&gt;hello641-641/com.kevin.tech.statusbardemo I/Kevin: 输入框内容-------&gt;nihao641-641/com.kevin.tech.statusbardemo I/Kevin: kevin--------&gt;nihao 好了，startActivityForResult的使用就是这么几步。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Error:Execution failed for task ':app:compileDebugJavaWithJavac'.解决方案","slug":"Error-Execution-failed-for-task-app-compileDebugJavaWithJavac-解决方案","date":"2016-10-21T17:40:58.000Z","updated":"2018-07-10T06:57:32.984Z","comments":true,"path":"2016/10/22/Error-Execution-failed-for-task-app-compileDebugJavaWithJavac-解决方案/","link":"","permalink":"https://student9128.github.io/2016/10/22/Error-Execution-failed-for-task-app-compileDebugJavaWithJavac-解决方案/","excerpt":"","text":"今天导入工程build的时候发生了一个错误；123Error:Execution failed for task &apos;:app:compileDebugJavaWithJavac&apos;.&gt; Could not open local jar classpath snapshot write cache. &gt; Unexpected lock protocol found in lock file. Expected 3, found 0. 看这意思就是跟cache有关系。之前在AndoidStudio2.2上写的，现在导入到2.1的版本上了。怀疑是Gradle的问题，于是乎改了发现还是不行。最后将工程目录里的.gradle文件删除重新导入。则解决此问题。 解决方案：将工程目录里的.gradle文件删除重新启动AndroidStudio导入","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"AndroidStudio导入第三方库","slug":"AndroidStudio导入第三方库","date":"2016-07-14T09:38:18.000Z","updated":"2018-07-07T07:03:29.435Z","comments":true,"path":"2016/07/14/AndroidStudio导入第三方库/","link":"","permalink":"https://student9128.github.io/2016/07/14/AndroidStudio导入第三方库/","excerpt":"","text":"大家都知道，现在很多公司都在用Google推崇的Android Studio，不过使用的时候总会有这样那样的疑问，比如说如何导入第三方库呢，以前的Eclipse都是之间复制粘贴到libs下的。Android Studio就不能这样了。我说两种自己常用的方法，还望大家多多指点！:) 第一种：通过导入Module1&gt;打开File——&gt;New——&gt;Import Module路径，点击Import Module; 2&gt;点击“…”找到大三方库所在路径 我这里使用的slidingMenu库演示，值得注意的是要将第三方库放到工程（project）所在目录，我这个是解压后正好有两个文件夹，如果你的不是那就在工程（project）所在目录新建一个文件夹，名字随意起方便你自己记就行了。然后（如下图）选择要导入的类库（看图片，要选择src所在目录的外面的一层，不然无法导入的，注意gradle文件，下面会出问题）。 3&gt;点击OK,出现下面图，说明选择正确，可以Finish进行导入了（library是导入的类库名称） 4&gt;好了，让Android Studio自己进行build吧，完成后如下图，会出现library文件夹，说明你导入成功了。 （值得注意的是，在build的时候会出现你的android studio缺少某些sdk,如19.1.0，直接按照提示进行安装即可。相信大家都会) 第二种：添加依赖 添加依赖更加简便 1&gt;打开File——&gt;Project Structure路径：2&gt;按照如上图路径：添加Library dependency 3&gt;直接在搜索框中搜索所要添加的库名即可，选中所要添加的类库，点击OK，等待Android Studio进行build完成即添加成功（可以在gradle文件中确定一下是否存在你刚刚添加的依赖，如果存在就说明添加成功） 声明：文章是从CSDN迁过来的，这里的图片是重新做的，所以AndroidStudio是新版本的","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"}]}]}
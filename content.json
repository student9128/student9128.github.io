{"pages":[{"title":"关于","date":"2018-07-09T07:58:13.067Z","updated":"2018-07-09T07:58:13.067Z","comments":false,"path":"about/index.html","permalink":"https://student9128.github.io/about/index.html","excerpt":"","text":"个人&emsp;&emsp;2016年第一次搭建Hexo博客，当时为了学习而搭建，之后发现需要维护的时候，切换了不同设备就比较麻烦，所以没有进行下去。现在决定重新回来，欢迎关注指导。Hello,i am back!一个不断学习的Android开发者。 扫码支持 支付宝 微信 感谢您的支持，我会继续努力的! ^_^"},{"title":"标签","date":"2018-06-27T03:10:52.000Z","updated":"2018-06-27T03:10:55.533Z","comments":false,"path":"tags/index.html","permalink":"https://student9128.github.io/tags/index.html","excerpt":"","text":"Android"},{"title":"友情链接","date":"2018-06-27T02:01:40.455Z","updated":"2018-06-26T09:10:21.665Z","comments":true,"path":"links/index.html","permalink":"https://student9128.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA标识符命名规则","slug":"JAVA标识符命名规则","date":"2018-07-09T08:07:48.000Z","updated":"2018-07-09T08:10:08.858Z","comments":true,"path":"2018/07/09/JAVA标识符命名规则/","link":"","permalink":"https://student9128.github.io/2018/07/09/JAVA标识符命名规则/","excerpt":"","text":"Java语言中，对各种变量、方法和类等要素命名时使用的字符序列称为标识符。 Java 标识符有如下命名规则： 由26个英文字母大小写，数字：0-9 符号：_ $ 组成 标识符应以字母、_ 、$开头。 标识符不能是关键字。 Java中严格区分大小写","categories":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://student9128.github.io/tags/Java/"}]},{"title":"FontAwesome 在Android中的使用","slug":"FontAwesome在Android中的使用","date":"2018-07-09T06:24:07.000Z","updated":"2018-07-09T07:11:21.885Z","comments":true,"path":"2018/07/09/FontAwesome在Android中的使用/","link":"","permalink":"https://student9128.github.io/2018/07/09/FontAwesome在Android中的使用/","excerpt":"","text":"本篇文章来记录下FontAweSome 在Android开发中的使用 效果 下载FontAweSome字体&emsp;&emsp;首先，要去下载fontAweSome字体。百度一下就可以找到，如果你找不到，请点击这里下 在工程中使用 将下载好的.ttf文件放入assets中 布局12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/ll_container&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_hello&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/fa_info&quot; android:textColor=&quot;#009688&quot; android:textSize=&quot;100sp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_poo&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/fa_chart&quot; android:textColor=&quot;#DAA520&quot; android:textSize=&quot;40sp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt;&lt;/LinearLayout&gt; &emsp;&emsp;可以看到布局文件中使用的TextView引用的外部string.可以是strings.xml文件也可以是你再values文件夹中新建的.xml文件。至于这个字符串怎么找的，可以去fontawesome的图标网上找到对应图标的字符串。12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;string name=&quot;fa_chart&quot;&gt;&amp;#xf201;&lt;/string&gt; &lt;string name=&quot;fa_info&quot;&gt;&amp;#xf2b9;&lt;/string&gt;&lt;/resources&gt; 代码中：12345Typeface font = Typeface.createFromAsset(getAssets(),&quot;fontawesome-webfont.ttf&quot;);TextView textView= (TextView) findViewById(R.id.tv_hello);textView.setTypeface(font);TextView tvPoo = findViewById(R.id.tv_poo);FontManager.fontIcon(tvPoo,this); 可以这样写。但是如果控件比较多的话，那么就稍微有些麻烦。这里通过FontManager类来统一设置12345678910111213141516171819202122232425/** * Created by Kevin on 2018/7/9. * &lt;p&gt; * Blog:http://student9128.top/ * CSDN:https://blog.csdn.net/student9128 * &lt;p/&gt; */public class FontManager &#123; public static void fontIcon(View v, Context context) &#123; Typeface typeface = Typeface.createFromAsset(context.getAssets(), &quot;fontawesome-webfont&quot; + &quot;.ttf&quot;); if (v instanceof ViewGroup) &#123; for (int i=0;i&lt;((ViewGroup) v).getChildCount();i++) &#123; View child = ((ViewGroup) v).getChildAt(i); fontIcon(child,context); &#125; &#125; else if (v instanceof TextView) &#123; ((TextView) v).setTypeface(typeface); &#125; else if (v instanceof Button) &#123; ((Button) v).setTypeface(typeface); &#125; else if (v instanceof EditText) &#123; ((EditText) v).setTypeface(typeface); &#125; &#125;&#125; 使用方法：12LinearLayout llContainer = findViewById(R.id.ll_container);FontManager.fontIcon(llContainer,this);","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"FontAweSome","slug":"FontAweSome","permalink":"https://student9128.github.io/tags/FontAweSome/"},{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/tags/Android/"}]},{"title":"Android Studio 3.1.2添加Module的问题","slug":"Android-Studio-3-1-2添加Module的问题","date":"2018-07-07T07:05:54.000Z","updated":"2018-07-07T07:27:03.680Z","comments":true,"path":"2018/07/07/Android-Studio-3-1-2添加Module的问题/","link":"","permalink":"https://student9128.github.io/2018/07/07/Android-Studio-3-1-2添加Module的问题/","excerpt":"","text":"&emsp;&emsp;Android 开发过程中，需要用到第三方，尽管添加依赖已经很普遍，但有的时候还是要添加module。&emsp;&emsp;AndroidStudio 3.1.2在import module的过程中发生了一个问题，就是finish后没有反应了。目录上也不显示moudle名称解决方案： 在setting.gradle中添加的include ‘:app’后面添加module的名称 1include &apos;:app&apos;,&apos;libraryname&apos;; 然后点击sync按钮进行重新编译一遍即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"},{"name":"issue","slug":"issue","permalink":"https://student9128.github.io/tags/issue/"}]},{"title":"写在前面的话","slug":"写在前面的话","date":"2018-06-26T07:50:57.000Z","updated":"2018-07-06T14:00:41.935Z","comments":true,"path":"2018/06/26/写在前面的话/","link":"","permalink":"https://student9128.github.io/2018/06/26/写在前面的话/","excerpt":"","text":"2016年第一次搭建Hexo博客，当时为了学习而搭建，之后发现需要维护的时候，切换了不同设备就比较麻烦，所以没有进行下去。现在决定重新回来，欢迎关注指导。Hello,i am back!","categories":[],"tags":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/tags/Test/"}]},{"title":"react-navigation的使用","slug":"react-navigation的使用","date":"2018-05-21T06:41:07.000Z","updated":"2018-07-09T08:02:48.839Z","comments":true,"path":"2018/05/21/react-navigation的使用/","link":"","permalink":"https://student9128.github.io/2018/05/21/react-navigation的使用/","excerpt":"","text":"react-navigation的是react native中的一个导航库，可以方便实现移动开发中的导航效果。网上很多关于react-navigation的使用文章。这里我只记录我自己使用过的。方便以后使用。因为这样的文章太多太多，各种讲解完全没必要，而且写文章的也不一定是自己就懂。 效果图 废话不多写，只贴代码。目的是，只要以后自己用的时候方便就可以。 导航栏 导入需要的控件12345import &#123; TabNavigator, StackNavigator, TabBarBottom,&#125; from &apos;react-navigation&apos;; 底部导航TabBar实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384const tabNavigator = TabNavigator(&#123; home: &#123; screen: MainScreen, navigationOptions:&#123; tabBarLabel:&apos;首页&apos;,//tabBar下面的文章 headerTitle:&apos;首页&apos;,//标题 tabBarIcon:(&#123;//tabBar的图标 tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-home&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, favorite: &#123; screen: FavoriteScreen, navigationOptions:&#123; headerTitle:&apos;收藏&apos;, tabBarLabel:&apos;收藏&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-heart&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, music:&#123; screen:MusicScreen, navigationOptions:&#123; headerTitle:&apos;音乐&apos;, tabBarLabel:&apos;音乐&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt; &lt;Icon name=&apos;ios-musical-notes&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; &#125; &#125;, settings:&#123; screen:SettingScreen, navigationOptions:&#123; headerTitle:&apos;设置&apos;, tabBarLabel:&apos;设置&apos;, tabBarIcon:(&#123; tintColor &#125;)=&gt;( &lt;Icon name=&apos;ios-settings&apos; size=&#123;25&#125; color=&#123;tintColor&#125;/&gt; ) &#125; &#125;&#125;, &#123; initialRouteName: &apos;home&apos;,//默认tab tabBarPosition: &apos;bottom&apos;,//tabBar位置 backBehavior: &apos;none&apos;, swipeEnabled: false,//不可滑动 animationEnabled: false,//切换页面时候没有滑动效果 tabBarOptions: &#123; activeTintColor: ColorStyles.global, inactiveTintColor: &apos;#333333&apos;, showIcon: true, indicatorStyle: &#123; height: 0 &#125;, style: &#123; backgroundColor: &apos;#fff&apos;, // TabBar 背景色 paddingBottom: 0, // borderTopWidth: 0.5, // borderTopColor: &apos;#ccc&apos;, // margin:0 &#125;, labelStyle: &#123; fontSize: 12, marginTop: 0, paddingTop: 0, paddingBottom: 0, &#125;, tabStyle: &#123; height: 56 &#125; &#125;&#125;) 整体导航，将app中进行切换的界面都放在这里 1234567891011121314151617181920212223242526272829303132export default App = StackNavigator(&#123;//这里导出的需要注册的 home:&#123; screen:tabNavigator, &#125;, login:&#123; screen:LoginScreen, &#125;, detail:&#123; screen:DetailScreen &#125;&#125;,&#123; initialRouteName:&apos;login&apos;, navigationOptions:(&#123; headerStyle:&#123; backgroundColor:ColorStyles.global, &#125;, headerTitleStyle:&#123; color:&apos;white&apos;, fontSize:20, flex:1, textAlign:&apos;center&apos;, alignSelf:&apos;center&apos;, &#125;, headerTintColor:&apos;white&apos;, &#125;), mode:&apos;card&apos;, headerMode:&apos;screen&apos;,&#125;) 注册 1AppRegistry.registerComponent(&apos;ReactNavigationDemo&apos;, () =&gt; App); 上面这些代码可以实现导航栏的切换 界面之间的切换只需要一行代码 从下面代码里抽出来的：onPress = {()=&gt;nav.navigate(‘home’) 12345678910111213141516171819202122232425262728export default class LoginScreen extends Component &#123; static navigationOptions = &#123; header: null, &#125;; render() &#123; const nav = this.props.navigation return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;StatusBar backgroundColor=&quot;gray&quot; barStyle=&quot;light-content&quot; /&gt; &lt;View style=&#123;styles.loginItemContainer&#125;&gt; &lt;LoginItem icon_name=&apos;ios-contact&apos; placeholder=&apos;Please text in username&apos; icon_color=&#123;ColorStyles.global&#125;/&gt; &lt;LoginItem icon_name=&apos;ios-lock&apos; placeholder=&apos;Please text in password&apos; secureTextEntry=&#123;true&#125; icon_color=&#123;ColorStyles.global&#125;/&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress = &#123;()=&gt;nav.navigate(&apos;home&apos;)&#125;&gt;//这里进行界面切换 &lt;Text style=&#123;styles.btnLogin&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/View&gt; ) &#125;&#125;; 界面之间的传值 代码1234567891011121314//传值 &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress = &#123; ()=&gt;&#123; console.log(this.state.username); nav.navigate(&apos;home&apos;,&#123;username:this.state.username,password:this.state.password&#125;)&#125;&#125;&gt;//传值 &lt;Text style=&#123;styles.btnLogin&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt;//接收值 const &#123; navigation &#125; = this.props const username = navigation.getParam(&apos;username&apos;, &apos;&apos;); const password = navigation.getParam(&apos;password&apos;, &apos;&apos;); 源代码 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"react-native-vector-icons的使用","slug":"react-native-vector-icons的使用","date":"2018-05-21T06:07:51.000Z","updated":"2018-07-09T07:54:45.661Z","comments":true,"path":"2018/05/21/react-native-vector-icons的使用/","link":"","permalink":"https://student9128.github.io/2018/05/21/react-native-vector-icons的使用/","excerpt":"","text":"react-native-vector-icons是react native中一个第三方图标库。使用起来非常方便。这里只说Andronid。该库有添加字体的使用，这里只记录我自己用到的。方便以后使用。 通过如下命令行添加依赖库： 1npm install react-native-vector-icons --save Android使用要在project gradle中添加一行代码 使用起来就是下面这样 1234567891011import Icon from &apos;react-native-vector-icons/Ionicons&apos;;export default class SomeView extends Component&#123; render() &#123; return ( &lt;View&gt; &lt;Icon name=&apos;md-contact&apos; size=&#123;30&#125; color=&apos;black&apos;/&gt; &lt;/View&gt; ) &#125;;&#125; 效果图： 左侧是没在gradle添加代码的效果,右侧是添加后的效果 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative打包后运行闪退","slug":"ReactNative打包后运行闪退","date":"2018-05-19T06:10:06.000Z","updated":"2018-07-09T07:40:01.066Z","comments":true,"path":"2018/05/19/ReactNative打包后运行闪退/","link":"","permalink":"https://student9128.github.io/2018/05/19/ReactNative打包后运行闪退/","excerpt":"","text":"Android原生项目集成了React Native后，打包成release运行起来后会出现闪退情况。原因：没有将React Native文件打包进去。解决方案：需要添加bundle文件在Android工程里的assets文件夹下生成bundle文件：在工程目录下输入命令如下：1react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ 注意：看一下你的入口是index.android.js还是index.js，根据情况修改命令。","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"VSCode常用插件","slug":"VSCode常用插件","date":"2018-04-15T14:30:23.000Z","updated":"2018-07-09T07:52:07.683Z","comments":true,"path":"2018/04/15/VSCode常用插件/","link":"","permalink":"https://student9128.github.io/2018/04/15/VSCode常用插件/","excerpt":"","text":"记录一些VSCode插件： 1.Auto Close Tag 2.Auto Rename Tag 3.Beautify4.Bracket Pair Colorizer 5.Code Spell Checker6.ESlint7.Filesize 显示文件的大小 8.HTML CSS Support9.HTML Snippets 代码快 10.HTMLHint11.Output Colorizer 12.React Native Snippet 13.React Native Tools 14.Setting Sync 同步设置的插件 主题的就算了，用来用去，还是感觉自带主题挺好的。 注：图片来源于Visual Studio Marketplace 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"React Native环境搭建","slug":"ReactNative环境搭建","date":"2018-04-15T14:05:39.000Z","updated":"2018-07-09T07:31:37.381Z","comments":true,"path":"2018/04/15/ReactNative环境搭建/","link":"","permalink":"https://student9128.github.io/2018/04/15/ReactNative环境搭建/","excerpt":"","text":"React Native环境搭建的文章网上一大堆，完全没有必要写这篇文章。这里只是简单记录下自己的可行性操作，方便自己查看，不用再去搜别人的了。 1.安装Node.js 我这里不按照网上或者React Native中文网写的用命令行安装Node.js，个人不习惯，直接去Node.js官网下载 2.安装镜像12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 很多地方都建议镜像，这里也安装镜像 3.安装yarn 根据自己需求，可安可不安，习惯用npm Yarn是Facebook提供的替代npm的工具。 12345npm install -g yarn react-native-cli设置镜像源：yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 4.创建React Native项目123react-native init HelloReactNativecd HelloReactNativereact-native run-android/run-ios 声明：文章是从CSDN迁过来的.","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问(四)","slug":"ReactNative遇到的问题(四)","date":"2018-03-31T15:09:11.000Z","updated":"2018-07-09T07:48:04.477Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(四)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(四)/","excerpt":"","text":"Hint: This error often happens when you’re running the packager (local dev server) from a wrong folder. For example you have multiple apps and the packager is still running for the app you were working on before.If this is the case, simply kill the old packager instance (e.g. close the packager terminal window) and start the packager in the correct app folder (e.g. cd into app folder and run ‘npm start’).This error can also happen due to a require() error during initialization or failure to call AppRegistry.registerComponent. 解决方案：之前运行了一个项目，导致终端冲突，关闭所有终端，重启即可。 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问(三)","slug":"ReactNative遇到的问题(三)","date":"2018-03-31T15:07:07.000Z","updated":"2018-07-09T07:47:37.339Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(三)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(三)/","excerpt":"","text":"解决方案：修改gradle版本号 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问(二)","slug":"ReactNative遇到的问题(二)","date":"2018-03-31T14:52:13.000Z","updated":"2018-07-09T07:46:36.035Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(二)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(二)/","excerpt":"","text":"React Native安装失败的问题 Execution failed for task ‘:app:installDebug’. com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallException: INSTALL_FAILED_USER_RESTRICTED 这种问题有可能是不同的原因导致的：这里记录下：解决方案：1.检查下是否连接了模拟器或者手机(本人遇到的这个问题)2.看下是否是gradle的问题 stackoverflow问题解决方案：https://stackoverflow.com/questions/37500205/react-native-appinstalldebug-failed 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"ReactNative遇到的问题(一)","slug":"ReactNative遇到的问题(一)","date":"2018-03-31T07:25:27.000Z","updated":"2018-07-09T07:39:56.300Z","comments":true,"path":"2018/03/31/ReactNative遇到的问题(一)/","link":"","permalink":"https://student9128.github.io/2018/03/31/ReactNative遇到的问题(一)/","excerpt":"","text":"在我们创建React Native项目的时候发现gradle 版本相对比较低的，而且很多情况下直接编译会报错。而网上的很多解决方案就是gradle version改为1.2.3,于是，我有一个疑问，现在的gradle verion都已经3.0.1了，为什么还不升级呢？ 但是我发现我直接修改后，更是报各种错。首先看下图 这是我在网上搜到的一与我疑问类似的问题 我的解决方案：就是直接修改gradel版本为我想要的很明显，会出现一些错误 报错 解决方案：gradle中添加google(); 修改gradle-wrapper.properties文件中的distributionUrl=https\\://services.gradle.org/distributions/gradle-4.1-all.zip 声明：文章是从CSDN迁过来的.CSDN博客请点击这里","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/categories/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://student9128.github.io/tags/ReactNative/"},{"name":"移动开发","slug":"移动开发","permalink":"https://student9128.github.io/tags/移动开发/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-12-18T16:00:00.000Z","updated":"2018-07-06T15:58:14.307Z","comments":true,"path":"2016/12/19/hello-world/","link":"","permalink":"https://student9128.github.io/2016/12/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/categories/Test/"}],"tags":[{"name":"Test","slug":"Test","permalink":"https://student9128.github.io/tags/Test/"}]},{"title":"AndroidStudio导入第三方库","slug":"AndroidStudio导入第三方库","date":"2016-07-14T09:38:18.000Z","updated":"2018-07-07T07:03:29.435Z","comments":true,"path":"2016/07/14/AndroidStudio导入第三方库/","link":"","permalink":"https://student9128.github.io/2016/07/14/AndroidStudio导入第三方库/","excerpt":"","text":"大家都知道，现在很多公司都在用Google推崇的Android Studio，不过使用的时候总会有这样那样的疑问，比如说如何导入第三方库呢，以前的Eclipse都是之间复制粘贴到libs下的。Android Studio就不能这样了。我说两种自己常用的方法，还望大家多多指点！:) 第一种：通过导入Module1&gt;打开File——&gt;New——&gt;Import Module路径，点击Import Module; 2&gt;点击“…”找到大三方库所在路径 我这里使用的slidingMenu库演示，值得注意的是要将第三方库放到工程（project）所在目录，我这个是解压后正好有两个文件夹，如果你的不是那就在工程（project）所在目录新建一个文件夹，名字随意起方便你自己记就行了。然后（如下图）选择要导入的类库（看图片，要选择src所在目录的外面的一层，不然无法导入的，注意gradle文件，下面会出问题）。 3&gt;点击OK,出现下面图，说明选择正确，可以Finish进行导入了（library是导入的类库名称） 4&gt;好了，让Android Studio自己进行build吧，完成后如下图，会出现library文件夹，说明你导入成功了。 （值得注意的是，在build的时候会出现你的android studio缺少某些sdk,如19.1.0，直接按照提示进行安装即可。相信大家都会) 第二种：添加依赖 添加依赖更加简便 1&gt;打开File——&gt;Project Structure路径：2&gt;按照如上图路径：添加Library dependency 3&gt;直接在搜索框中搜索所要添加的库名即可，选中所要添加的类库，点击OK，等待Android Studio进行build完成即添加成功（可以在gradle文件中确定一下是否存在你刚刚添加的依赖，如果存在就说明添加成功） 声明：文章是从CSDN迁过来的，这里的图片是重新做的，所以AndroidStudio是新版本的","categories":[{"name":"Android","slug":"Android","permalink":"https://student9128.github.io/categories/Android/"}],"tags":[{"name":"AndroidStudio","slug":"AndroidStudio","permalink":"https://student9128.github.io/tags/AndroidStudio/"}]}]}